"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1218],{25668:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"getting-started/examples/scans-and-queries","title":"Scans & Queries","description":"In this guide, we\u2019ll explore how to retrieve multiple items from your DynamoDB table using Scan and Query actions:","source":"@site/docs/1-getting-started/4-examples/2-scans-and-queries.md","sourceDirName":"1-getting-started/4-examples","slug":"/getting-started/examples/scans-and-queries","permalink":"/docs/getting-started/examples/scans-and-queries","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Scans & Queries"},"sidebar":"tutorialSidebar","previous":{"title":"KV Store","permalink":"/docs/getting-started/examples/kv-store"},"next":{"title":"Usage","permalink":"/docs/tables/usage/"}}');var s=t(74848),i=t(28453);const r={title:"Scans & Queries"},d="Scans & Queries",o={},l=[{value:"Scanning a Table",id:"scanning-a-table",level:2},{value:"Handling Pagination",id:"handling-pagination",level:2},{value:"Querying a Table",id:"querying-a-table",level:2},{value:"1. Add a Secondary Index",id:"1-add-a-secondary-index",level:3},{value:"2. Extend the Schema",id:"2-extend-the-schema",level:3},{value:"3. Assign Items to the Index",id:"3-assign-items-to-the-index",level:3},{value:"Query Pokemons",id:"query-pokemons",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"scans--queries",children:"Scans & Queries"})}),"\n",(0,s.jsxs)(n.p,{children:["In this guide, we\u2019ll explore how to retrieve multiple items from your DynamoDB table using ",(0,s.jsx)(n.strong,{children:"Scan"})," and ",(0,s.jsx)(n.strong,{children:"Query"})," actions:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Scan.html",children:(0,s.jsx)(n.strong,{children:"Scans"})})," are ",(0,s.jsx)(n.strong,{children:"costly and slow"})," \u2014 best used for maintenance tasks or small datasets."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html",children:(0,s.jsx)(n.strong,{children:"Queries"})})," are ",(0,s.jsx)(n.strong,{children:"efficient and targeted"})," \u2014 ideal for production usage with proper indexing."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"scanning-a-table",children:"Scanning a Table"}),"\n",(0,s.jsxs)(n.p,{children:["We can use the ",(0,s.jsx)(n.a,{href:"/docs/tables/actions/scan/",children:(0,s.jsx)(n.code,{children:"ScanCommand"})})," action to retrieve all items from a table. This action works at the table level since it can access multiple entities (when using Single Table Design):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { ScanCommand } from 'dynamodb-toolbox/table/actions/scan'\n\nconst command = PokeTable.build(ScanCommand)\n  // \ud83d\udc47 Needed to validate & type returned Items\n  .entities(PokemonEntity)\n\n// \ud83d\udc47 Validated AND type-safe!\nconst { Items } = await command.send()\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"Scanning is slow and expensive at scale. Use it sparingly."})}),"\n",(0,s.jsx)(n.h2,{id:"handling-pagination",children:"Handling Pagination"}),"\n",(0,s.jsxs)(n.p,{children:["DynamoDB paginates results. To process the full dataset, loop through pages using ",(0,s.jsx)(n.code,{children:"LastEvaluatedKey"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"let lastEvaluatedKey: Record<string, unknown> | undefined\n\ndo {\n  const page = await command\n    .options({ exclusiveStartKey: lastEvaluatedKey })\n    .send()\n\n  // ...do something with page.Items here...\n\n  lastEvaluatedKey = page.LastEvaluatedKey\n} while (lastEvaluatedKey !== undefined)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"querying-a-table",children:"Querying a Table"}),"\n",(0,s.jsx)(n.p,{children:"Querying is a fast and efficient way to fetch items based on indexed keys (primary or secondary)."}),"\n",(0,s.jsx)(n.h3,{id:"1-add-a-secondary-index",children:"1. Add a Secondary Index"}),"\n",(0,s.jsxs)(n.p,{children:["To query by attributes other than the primary key, define a ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SecondaryIndexes.html",children:"Secondary Index"})," in your table:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const PokeTable = new Table({\n  ...\n  indexes: {\n    byTrainerId: {\n      type: 'global',\n      partitionKey: { name: 'trainerId', type: 'string' },\n      sortKey: { name: 'captureDate', type: 'string' }\n    }\n  }\n})\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-extend-the-schema",children:"2. Extend the Schema"}),"\n",(0,s.jsx)(n.p,{children:"Include the index attributes in your entity schema. We can mark them as optional as they only apply to certain items:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const pokemonSchema = item({\n  ...\n  // \ud83d\udc47 No need to tag attr. as `key()`\n  trainerId: string().optional(),\n  captureDate: string().optional()\n})\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["We can make use of ",(0,s.jsx)(n.a,{href:"/docs/schemas/defaults-and-links/",children:(0,s.jsx)(n.code,{children:"links"})})," to auto-set or remove the ",(0,s.jsx)(n.code,{children:"captureDate"})," based on the presence of ",(0,s.jsx)(n.code,{children:"trainerId"}),":"]}),(0,s.jsxs)(t,{className:"details-in-admonition",children:[(0,s.jsxs)("summary",{children:["\ud83d\udd0e ",(0,s.jsx)("b",{children:"Show code"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {\n  isRemoval,\n  $remove\n} from 'dynamodb-toolbox/entity/actions/update/symbols'\n\nconst pokemonSchema = item({\n  ...\n  trainerId: string().optional()\n}).and(prevSchema => ({\n  captureDate: string()\n    .optional()\n    .putLink<typeof prevSchema>(({ trainerId }) =>\n      trainerId !== undefined\n        ? new Date().toISOString()\n        : undefined\n    )\n    .updateLink<typeof prevSchema>(({ trainerId }) => {\n      if (isRemoval(trainerId)) {\n        // Remove captureDate if trainerId is removed\n        return $remove()\n      }\n\n      return trainerId !== undefined\n        ? new Date().toISOString()\n        : undefined\n    })\n}))\n"})})]})]}),"\n",(0,s.jsx)(n.h3,{id:"3-assign-items-to-the-index",children:"3. Assign Items to the Index"}),"\n",(0,s.jsx)(n.p,{children:"To populate the index, update the entity with the required attributes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"await PokemonEntity.build(UpdateItemCommand)\n  .item({\n    pokemonId: 'pikachu-1',\n    trainerId: 'ash-ketchum',\n    captureDate: new Date().toISOString()\n  })\n  .send()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"query-pokemons",children:"Query Pokemons"}),"\n",(0,s.jsxs)(n.p,{children:["Now that the index is in place and populated, we can use the ",(0,s.jsx)(n.a,{href:"/docs/tables/actions/query/",children:"QueryCommand"})," action to fetch Pokemons by ",(0,s.jsx)(n.code,{children:"trainerId"})," and sorted by ",(0,s.jsx)(n.code,{children:"captureDate"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const command = PokeTable.build(QueryCommand)\n  // \ud83d\udc47 Needed to validate & type returned Items\n  .entities(PokemonEntity)\n  .query({ index: 'byTrainerId', partition: 'ash-ketchum' })\n\n// \ud83d\udc47 Validated AND type-safe!\nconst { Items } = await command.send()\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"Just like Scan, Query results are also paginated."})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var a=t(96540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);