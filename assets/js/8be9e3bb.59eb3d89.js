"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9451],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var s=r(96540);const o={},t=s.createContext(o);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(t.Provider,{value:n},e.children)}},52991:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"schemas/transformers/pipe","title":"pipe","description":"Merge multiple transformers into a single transformer:","source":"@site/docs/4-schemas/18-transformers/5-pipe.md","sourceDirName":"4-schemas/18-transformers","slug":"/schemas/transformers/pipe","permalink":"/docs/schemas/transformers/pipe","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"pipe","sidebar_custom_props":{"code":true,"new":true}},"sidebar":"tutorialSidebar","previous":{"title":"jsonStringify","permalink":"/docs/schemas/transformers/json-stringify"},"next":{"title":"Usage","permalink":"/docs/databases/usage/"}}');var o=r(74848),t=r(28453);const i={title:"pipe",sidebar_custom_props:{code:!0,new:!0}},a="Pipe",p={},d=[];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"pipe",children:"Pipe"})}),"\n",(0,o.jsx)(n.p,{children:"Merge multiple transformers into a single transformer:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { pipe } from 'dynamodb-toolbox/transformers/pipe'\nimport { prefix } from 'dynamodb-toolbox/transformers/prefix'\nimport { suffix } from 'dynamodb-toolbox/transformers/suffix'\n\nconst piped = pipe(prefix('PREFIX'), suffix('SUFFIX'))\nconst schema = string().transform(piped)\n\nprefixer.encode('foo') // => 'PREFIX#foo'\nprefixer.decode('PREFIX#bar') // => 'bar'\n"})}),"\n",(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsxs)(n.p,{children:["Piped ",(0,o.jsx)(n.code,{children:"encoders"})," are applied from left to right (and ",(0,o.jsx)(n.code,{children:"decoders"})," from right to left):"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const piped = pipe(prefix('lo'), prefix('yo'))\n\npiped.encode('swag') // => 'yo#lo#swag'\npiped.decode('yo#lo#swag') // => 'swag'\n"})})]}),"\n",(0,o.jsxs)(n.p,{children:["Eventhough ",(0,o.jsx)(n.code,{children:"pipe"})," is exposed, we recommend using the official ",(0,o.jsx)(n.code,{children:".pipe(...)"})," methods of each off-the-shelf transformer (including this one) for improved type-safety:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const prefixer = prefix('PREFIX')\n\nconst addOne: Transformer<number> = {\n  encode: decoded => decoded + 1,\n  decode: encoded => encoded - 1\n}\n\n// \ud83d\ude45\u200d\u2642\ufe0f NOT type-safe\nconst notTypeSafe = pipe(prefixer, addOne)\n\n// \ud83d\udca5 Raises a type error \ud83d\udc4d\nconst typeSafe = prefix('PREFIX').pipe(addOne)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can ",(0,o.jsx)(n.a,{href:"/docs/schemas/transformers/pipe",children:"pipe"})," any transformer matching the end of the current pipe with the ",(0,o.jsx)(n.code,{children:".pipe(...)"})," method:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const transformer = jsonStringify()\n  .pipe(prefix('PREFIX'))\n  .pipe(suffix('SUFFIX'))\n\ntransformer.encode({ foo: 'bar' }) // => 'PREFIX#{\"foo\":\"bar\"}#SUFFIX'\n"})})]})}function f(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);