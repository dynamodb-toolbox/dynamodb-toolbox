"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7369],{28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var o=r(96540);const t={},a=o.createContext(t);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(a.Provider,{value:n},e.children)}},63072:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"error-management/index","title":"\ud83d\udca5 Error management","description":"When DynamoDB-Toolbox encounters an unexpected input, it throws an instance of DynamoDBToolboxError, which itself extends the native Error class with a code property:","source":"@site/docs/6-error-management/index.md","sourceDirName":"6-error-management","slug":"/error-management/","permalink":"/docs/error-management/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"\ud83d\udca5 Error management"},"sidebar":"tutorialSidebar","previous":{"title":"Synchronize","permalink":"/docs/databases/actions/synchronize/"}}');var t=r(74848),a=r(28453);const s={title:"\ud83d\udca5 Error management"},i="Error Management",c={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"error-management",children:"Error Management"})}),"\n",(0,t.jsxs)(n.p,{children:["When DynamoDB-Toolbox encounters an unexpected input, it throws an instance of ",(0,t.jsx)(n.code,{children:"DynamoDBToolboxError"}),", which itself extends the native ",(0,t.jsx)(n.code,{children:"Error"})," class with a ",(0,t.jsx)(n.code,{children:"code"})," property:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"await PokemonEntity\n  .build(PutItemCommand)\n  .item({ ..., level: 'not a number' })\n  .send();\n// \u274c [parsing.invalidAttributeInput] Attribute 'level' should be a number\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Some ",(0,t.jsx)(n.code,{children:"DynamoDBToolboxErrors"})," also expose a ",(0,t.jsx)(n.code,{children:"path"})," property (mostly in validations) and/or a ",(0,t.jsx)(n.code,{children:"payload"})," property for additional context."]}),"\n",(0,t.jsxs)(n.p,{children:["If you need to handle them, TypeScript is your best friend, as the ",(0,t.jsx)(n.code,{children:"code"})," property correctly distinguish the ",(0,t.jsx)(n.code,{children:"DynamoDBToolboxError"})," type:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { DynamoDBToolboxError } from 'dynamodb-toolbox';\n\nconst handleError = (error: Error) => {\n  if (!error instanceof DynamoDBToolboxError) throw error;\n\n  switch (error.code) {\n    case 'parsing.invalidAttributeInput':\n      const path = error.path;\n      // => \"level\"\n      const payload = error.payload;\n      // => { received: \"not a number\", expected: \"number\" }\n      break;\n      ...\n    case 'entity.invalidSchema':\n      const path = error.path; // \u274c error does not have path property\n      const payload = error.payload; // \u274c same goes with payload\n      ...\n  }\n};\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);