"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6094],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>r});var t=s(96540);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},87143:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"databases/usage/index","title":"Usage","description":"Serves as a single entry point for a collection of Tables, Entities, and AccessPatterns via the Registry Table Action:","source":"@site/docs/5-databases/1-usage/index.md","sourceDirName":"5-databases/1-usage","slug":"/databases/usage/","permalink":"/docs/databases/usage/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Usage"},"sidebar":"tutorialSidebar","previous":{"title":"jsonStringify","permalink":"/docs/schemas/transformers/json-stringify"},"next":{"title":"MCPToolkit","permalink":"/docs/databases/actions/mcp-toolkit/"}}');var a=s(74848),i=s(28453);const o={title:"Usage"},r="Database",c={},d=[{value:"Constructor",id:"constructor",level:2},{value:"<code>tables</code>",id:"tables",level:3},{value:"<code>options</code>",id:"options",level:3},{value:"<code>meta</code>",id:"meta",level:4},{value:"Building Database Actions",id:"building-database-actions",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"database",children:"Database"})}),"\n",(0,a.jsxs)(n.p,{children:["Serves as a single entry point for a collection of ",(0,a.jsx)(n.code,{children:"Tables"}),", ",(0,a.jsx)(n.code,{children:"Entities"}),", and ",(0,a.jsx)(n.code,{children:"AccessPatterns"})," via the ",(0,a.jsx)(n.a,{href:"/docs/tables/actions/registry/",children:(0,a.jsx)(n.code,{children:"Registry"})})," Table Action:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { Database } from 'dynamodb-toolbox/database'\n\n// Build `Registry` first\nconst PokeRegistry = PokeTable.build(Registry)\n  .registerEntities(TrainerEntity, PokemonEntity)\n  .registerAccessPatterns({ trainers, trainerPokemons })\n\nconst PokeDB = new Database({\n  pokedex: PokeRegistry\n})\n\n// Get a Registry by key\nPokeDB.tables.pokedex\n\n// Get an Entity by `entityName`\nPokeDB.tables.pokedex.entities.trainer\n\n// Get an AccessPattern by key\nPokeDB.tables.pokedex.accessPatterns.trainers.query(...)\n\n// Or use the `.query` shorthand\nPokeDB.tables.pokedex.query.trainers(...)\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsx)(n.p,{children:"Because Database can reduce the effectiveness of tree-shaking, we recommend using it only:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"If bundle size isn't a concern"}),"\n",(0,a.jsxs)(n.li,{children:["For specific use cases such as:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/databases/actions/mcp-toolkit/",children:"Describing an MCP server"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/databases/actions/synchronize/",children:"Synchronizing with DynamoDB-Toolshack"})}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,a.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Database"})," constructor takes two parameters: ",(0,a.jsx)(n.code,{children:"tables"})," and optional ",(0,a.jsx)(n.code,{children:"options"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"tables",children:(0,a.jsx)(n.code,{children:"tables"})}),"\n",(0,a.jsx)("p",{style:{marginTop:"-15px"},children:(0,a.jsx)("i",{children:"(required)"})}),"\n",(0,a.jsxs)(n.p,{children:["The Tables contained in the ",(0,a.jsx)(n.code,{children:"Database"}),". Each can be either a ",(0,a.jsx)(n.a,{href:"/docs/tables/usage/",children:(0,a.jsx)(n.code,{children:"Table"})})," or a ",(0,a.jsx)(n.a,{href:"/docs/tables/actions/registry/",children:(0,a.jsx)(n.code,{children:"Registry"})}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const tables = {\n  pokedex: PokeRegistry\n  other: OtherRegistry\n}\n\nconst PokeDB = new Database(tables)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"options",children:(0,a.jsx)(n.code,{children:"options"})}),"\n",(0,a.jsxs)(n.p,{children:["Additional options ",(0,a.jsx)(n.em,{children:"(optional)"}),":"]}),"\n",(0,a.jsx)(n.h4,{id:"meta",children:(0,a.jsx)(n.code,{children:"meta"})}),"\n",(0,a.jsxs)(n.p,{children:["Attaches metadata to the ",(0,a.jsx)(n.code,{children:"Database"})," (as an object property)."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"meta"})," object can include a ",(0,a.jsx)(n.code,{children:"title"})," and ",(0,a.jsx)(n.code,{children:"description"}),", both of which must be strings. Additional fields can be of any type:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const PokeDB = new Database(\n  ...,\n  {\n    meta: {\n      title: 'Pokedex',\n      description:\n        'An Awesome Database for development use',\n      other: { field: 'of any type' }\n    }\n  }\n)\n\n// \ud83d\udc47 Directly access/modify metadata\nconsole.log(PokeDB.meta)\nPokeDB.meta.foo = 'A new field'\n"})}),"\n",(0,a.jsx)(n.h2,{id:"building-database-actions",children:"Building Database Actions"}),"\n",(0,a.jsxs)(n.p,{children:["To allow for ",(0,a.jsx)(n.strong,{children:"extensibility"}),", ",(0,a.jsx)(n.strong,{children:"better code-splitting"})," and ",(0,a.jsx)(n.strong,{children:"lighter bundles"}),", ",(0,a.jsx)(n.code,{children:"Database"})," only expose a ",(0,a.jsx)(n.code,{children:".build(...)"})," method which acts as a gateway to perform Database ",(0,a.jsx)(n.a,{href:"/docs/getting-started/usage/#how-do-actions-work",children:"Actions"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { MCPToolkit } from 'dynamodb-toolbox/database/actions/mcpToolkit'\n\nconst mcpToolkit = PokeDB.build(MCPToolkit)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);