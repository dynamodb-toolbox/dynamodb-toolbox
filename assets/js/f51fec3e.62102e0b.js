"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4565],{11470:(e,n,t)=>{t.d(n,{A:()=>T});var a=t(96540),s=t(18215),r=t(23104),o=t(56347),l=t(205),i=t(57485),c=t(31682),d=t(70679);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const s=(0,o.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,i.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})}),[r,s])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,r=h(e),[o,i]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[c,u]=p({queryString:t,groupId:s}),[b,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,r]=(0,d.Dv)(t);return[s,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:s}),y=(()=>{const e=c??b;return m({value:e,tabValues:r})?e:null})();(0,l.A)((()=>{y&&i(y)}),[y]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),x(e)}),[u,x,r]),tabValues:r}}var x=t(92303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(74848);function f(e){let{className:n,block:t,selectedValue:a,selectValue:o,tabValues:l}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),d=e=>{const n=e.currentTarget,t=i.indexOf(n),s=l[t].value;s!==a&&(c(n),o(s))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=i.indexOf(e.currentTarget)+1;n=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(e.currentTarget)-1;n=i[t]??i[i.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>i.push(e),onKeyDown:u,onClick:d,...r,className:(0,s.A)("tabs__item",y.tabItem,r?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function g(e){let{lazy:n,children:t,selectedValue:r}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function v(e){const n=b(e);return(0,j.jsxs)("div",{className:(0,s.A)("tabs-container",y.tabList),children:[(0,j.jsx)(f,{...n,...e}),(0,j.jsx)(g,{...n,...e})]})}function T(e){const n=(0,x.A)();return(0,j.jsx)(v,{...e,children:u(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var r=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,o),hidden:t,children:n})}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var a=t(96540);const s={},r=a.createContext(s);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:n},e.children)}},86657:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"tables/usage/index","title":"Usage","description":"Each Table instance describes the configuration of a deployed DynamoDB Table: Its name, primary key, secondary indexes, and more.","source":"@site/docs/2-tables/1-usage/index.md","sourceDirName":"2-tables/1-usage","slug":"/tables/usage/","permalink":"/docs/tables/usage/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Usage"},"sidebar":"tutorialSidebar","previous":{"title":"Scans & Queries","permalink":"/docs/getting-started/examples/scans-and-queries"},"next":{"title":"Scan","permalink":"/docs/tables/actions/scan/"}}');var s=t(74848),r=t(28453),o=t(11470),l=t(19365);const i={title:"Usage"},c="Table",d={},u=[{value:"Constructor",id:"constructor",level:2},{value:"<code>documentClient</code>",id:"documentclient",level:3},{value:"<code>name</code>",id:"name",level:3},{value:"<code>partitionKey</code>",id:"partitionkey",level:3},{value:"<code>sortKey</code>",id:"sortkey",level:3},{value:"<code>indexes</code>",id:"indexes",level:3},{value:"<code>entityAttributeSavedAs</code>",id:"entityattributesavedas",level:3},{value:"<code>meta</code>",id:"meta",level:3},{value:"Building Table Actions",id:"building-table-actions",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"table",children:"Table"})}),"\n",(0,s.jsxs)(n.p,{children:["Each ",(0,s.jsx)(n.strong,{children:"Table"})," instance describes the configuration of a deployed DynamoDB Table: Its ",(0,s.jsx)(n.strong,{children:"name"}),", ",(0,s.jsx)(n.strong,{children:"primary key"}),", ",(0,s.jsx)(n.strong,{children:"secondary indexes"}),", and more."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Table } from 'dynamodb-toolbox/table'\n\nconst PokeTable = new Table({\n  ...\n})\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The configuration provided to the ",(0,s.jsx)(n.code,{children:"Table"})," constructor must match your resources. But DynamoDB-Toolbox does NOT hold the responsibility of actually deploying them. This should be done by other means, like the ",(0,s.jsx)(n.a,{href:"https://aws.amazon.com/cli/",children:"AWS CLI"}),", ",(0,s.jsx)(n.a,{href:"https://www.terraform.io/",children:"Terraform"})," or ",(0,s.jsx)(n.a,{href:"https://aws.amazon.com/cloudformation/",children:"Cloudformation"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Table"})," constructor takes a single parameter of type ",(0,s.jsx)(n.code,{children:"object"})," and accepts the following properties:"]}),"\n",(0,s.jsx)(n.h3,{id:"documentclient",children:(0,s.jsx)(n.code,{children:"documentClient"})}),"\n",(0,s.jsxs)(n.p,{children:["As mentioned in the ",(0,s.jsx)(n.a,{href:"/docs/getting-started/overview/",children:"Getting Started section"}),", DynamoDB-Tooblox is an ",(0,s.jsx)(n.strong,{children:"abstraction layer over the Document Client"}),", but it does not replace it. A ",(0,s.jsx)(n.code,{children:"DocumentClient"})," instance is explicitly needed for commands to interact with DynamoDB:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// From peer dependencies\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb'\nimport { DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb'\n\nconst dynamoDBClient = new DynamoDBClient()\n\nconst documentClient = DynamoDBDocumentClient.from(\n  dynamoDBClient,\n  {\n    marshallOptions: {\n      // Specify your client options as usual\n      removeUndefinedValues: true,\n      convertEmptyValues: false\n      ...\n    }\n  }\n)\n\nconst PokeTable = new Table({\n  documentClient,\n  ...\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also set it later in the code (but beware that commands fail if no client has been provided):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const PokeTable = new Table(...)\n\n// Later in the code\nconst documentClient = ...\nPokeTable.documentClient = documentClient\n"})}),"\n",(0,s.jsx)(n.h3,{id:"name",children:(0,s.jsx)(n.code,{children:"name"})}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.code,{children:"string"})," (or function returning a ",(0,s.jsx)(n.code,{children:"string"}),") that matches the ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.Basics.html#WorkingWithTables.Basics.CreateTable",children:"name"})," of your DynamoDB table:"]}),"\n",(0,s.jsx)(n.admonition,{title:"Examples",type:"note",children:(0,s.jsxs)(o.A,{children:[(0,s.jsx)(l.A,{value:"fixed",label:"Fixed",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const PokeTable = new Table({\n  name: "poke-table",\n  ...\n});\n'})})}),(0,s.jsx)(l.A,{value:"env",label:"From env",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const PokeTable = new Table({\n  name: process.env.POKE_TABLE_NAME,\n  ...\n});\n"})})}),(0,s.jsx)(l.A,{value:"getter",label:"Getter",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const PokeTable = new Table({\n  // \ud83d\udc47 Only executed at command execution\n  name: () => process.env.POKE_TABLE_NAME,\n  ...\n});\n"})})})]})}),"\n",(0,s.jsxs)(n.p,{children:["You can also provide it through ",(0,s.jsx)(n.strong,{children:"command options"})," \u2013 which is useful for ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Multitenancy",children:"multitenant apps"})," \u2013 but beware that commands fail if no table name has been provided:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const PokeTable = new Table({\n  // Omit `name` property\n  documentClient,\n  ...\n})\n\n// Scan tenant table\nconst { Items } = await PokeTable.build(ScanCommand)\n  .options({ tableName: tenantTableName })\n  .send()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"partitionkey",children:(0,s.jsx)(n.code,{children:"partitionKey"})}),"\n",(0,s.jsx)("p",{style:{marginTop:"-15px"},children:(0,s.jsx)("i",{children:"(required)"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey",children:"partition key"})," attribute name and type of your DynamoDB table:"]}),"\n",(0,s.jsx)(n.admonition,{title:"Examples",type:"note",children:(0,s.jsxs)(o.A,{children:[(0,s.jsx)(l.A,{value:"string",label:"String",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const MyTable = new Table({\n  ...,\n  partitionKey: {\n    name: "pokemonId",\n    type: "string",\n  }\n})\n'})})}),(0,s.jsx)(l.A,{value:"number",label:"Number",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const MyTable = new Table({\n  ...,\n  partitionKey: {\n    name: "pokemonId",\n    type: "number",\n  }\n})\n'})})}),(0,s.jsx)(l.A,{value:"binary",label:"Binary",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const MyTable = new Table({\n  ...,\n  partitionKey: {\n    name: "pokemonId",\n    type: "binary",\n  }\n})\n'})})})]})}),"\n",(0,s.jsx)(n.h3,{id:"sortkey",children:(0,s.jsx)(n.code,{children:"sortKey"})}),"\n",(0,s.jsxs)(n.p,{children:["If present, the ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey",children:"sort key"})," attribute name and type of your DynamoDB table:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const MyTable = new Table({\n  ...,\n  sortKey: {\n    name: "level",\n    type: "number",\n  }\n})\n'})}),"\n",(0,s.jsx)(n.h3,{id:"indexes",children:(0,s.jsx)(n.code,{children:"indexes"})}),"\n",(0,s.jsxs)(n.p,{children:["An object that lists the ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.SecondaryIndexes",children:"secondary indexes"})," of your DynamoDB Table."]}),"\n",(0,s.jsx)(n.p,{children:"Secondary indexes are represented as key-value pairs, keys being the index names, and values containing:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"type"})," of the secondary index (",(0,s.jsx)(n.code,{children:'"local"'})," or ",(0,s.jsx)(n.code,{children:'"global"'}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["For global secondary indexes, the ",(0,s.jsx)(n.code,{children:"partitionKey"})," of the index (similar to the main ",(0,s.jsx)(n.a,{href:"#partitionkey",children:(0,s.jsx)(n.code,{children:"partitionKey"})}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["If present, the ",(0,s.jsx)(n.code,{children:"sortKey"})," of the index (similar to the main ",(0,s.jsx)(n.a,{href:"#sortkey",children:(0,s.jsx)(n.code,{children:"sortKey"})}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Examples",type:"note",children:(0,s.jsxs)(o.A,{children:[(0,s.jsx)(l.A,{value:"gsi",label:"Global Index",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const MyTable = new Table({\n  ...,\n  indexes: {\n    byTrainerId: {\n      type: 'global',\n      partitionKey: { name: 'trainerId', type: 'string' }\n    }\n  }\n})\n"})})}),(0,s.jsx)(l.A,{value:"gsi-sort-key",label:"Global Index (+ sort key)",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const MyTable = new Table({\n  ...,\n  indexes: {\n    byTrainerId: {\n      type: 'global',\n      partitionKey: { name: 'trainerId', type: 'string' },\n      sortKey: { name: 'level', type: 'number' }\n    }\n  }\n})\n"})})}),(0,s.jsx)(l.A,{value:"lsi",label:"Local Index",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const MyTable = new Table({\n  ...,\n  indexes: {\n    byLevel: {\n      type: 'local',\n      sortKey: { name: 'level', type: 'number' }\n    }\n  }\n})\n"})})})]})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["When whitelisted, the projected attributes of a secondary index should include the ",(0,s.jsx)(n.code,{children:"Table"}),"'s ",(0,s.jsx)(n.a,{href:"#entityattributesavedas",children:"entity attribute"})," for a more performant formatting of the returned data."]})}),"\n",(0,s.jsx)(n.h3,{id:"entityattributesavedas",children:(0,s.jsx)(n.code,{children:"entityAttributeSavedAs"})}),"\n",(0,s.jsxs)(n.p,{children:["DynamoDB-Toolbox tags your data via an internal and hidden ",(0,s.jsx)(n.a,{href:"/docs/entities/internal-attributes/#entity",children:(0,s.jsx)(n.code,{children:"entity"})})," attribute. Any write command automatically sets its value to the corresponding ",(0,s.jsx)(n.code,{children:"Entity"})," name."]}),"\n",(0,s.jsxs)(n.p,{children:["To allow for appropriate formatting when fetching multiple items of the same ",(0,s.jsx)(n.code,{children:"Table"})," in a single operation (like ",(0,s.jsx)(n.a,{href:"/docs/tables/actions/query/",children:"Queries"})," or ",(0,s.jsx)(n.a,{href:"/docs/tables/actions/scan/",children:"Scans"}),"), ",(0,s.jsx)(n.strong,{children:"the key of this attribute must be the same accross all of its items"}),", so it must be set at the ",(0,s.jsx)(n.code,{children:"Table"})," level."]}),"\n",(0,s.jsxs)(n.p,{children:["Its default value is ",(0,s.jsx)(n.code,{children:"_et"}),", but it can be renamed through the ",(0,s.jsx)(n.code,{children:"entityAttributeSavedAs"})," argument:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const MyTable = new Table({\n  ...\n  // \ud83d\udc47 defaults to '_et'\n  entityAttributeSavedAs: '__entity__',\n});\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["\u261d\ufe0f This property ",(0,s.jsx)(n.strong,{children:"cannot be updated"})," once your Table has its first item (at least not without a data migration first), so choose wisely!"]})}),"\n",(0,s.jsx)(n.h3,{id:"meta",children:(0,s.jsx)(n.code,{children:"meta"})}),"\n",(0,s.jsxs)(n.p,{children:["Attaches metadata to the ",(0,s.jsx)(n.code,{children:"Table"})," (as an object property)."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"meta"})," object can include a ",(0,s.jsx)(n.code,{children:"title"})," and ",(0,s.jsx)(n.code,{children:"description"}),", both of which must be strings. Additional fields can be of any type:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const MyTable = new Table({\n  ...\n  meta: {\n    title: 'Pokedex',\n    description: 'An Awesome Table for development use',\n    other: { field: 'of any type' }\n  }\n})\n\n// \ud83d\udc47 Directly access/modify metadata\nconsole.log(MyTable.meta)\nMyTable.meta.foo = 'A new field'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Although optional, the meta property can be helpful in scenarios like ",(0,s.jsx)(n.a,{href:"/docs/databases/actions/mcp-toolkit/",children:"describing a MCP Server"})," or ",(0,s.jsx)(n.a,{href:"/docs/databases/actions/synchronize/",children:"synchronizing with DynamoDB-Toolshack"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"building-table-actions",children:"Building Table Actions"}),"\n",(0,s.jsxs)(n.p,{children:["To allow for ",(0,s.jsx)(n.strong,{children:"extensibility"}),", ",(0,s.jsx)(n.strong,{children:"better code-splitting"})," and ",(0,s.jsx)(n.strong,{children:"lighter bundles"}),", ",(0,s.jsx)(n.code,{children:"Tables"})," only expose a ",(0,s.jsx)(n.code,{children:".build(...)"})," method which acts as a gateway to perform Table ",(0,s.jsx)(n.a,{href:"/docs/getting-started/usage/#how-do-actions-work",children:"Actions"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { ScanCommand } from 'dynamodb-toolbox/table/actions/scan'\n\nconst { Items } = await PokeTable.build(ScanCommand).send()\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["If you don't mind large bundle sizes, you can still use the ",(0,s.jsx)(n.a,{href:"/docs/entities/actions/repository/",children:(0,s.jsx)(n.code,{children:"EntityRepository"})})," actions that expose all the others as methods."]})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);