"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8935],{28453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>i});var a=n(96540);const o={},t=a.createContext(o);function r(e){const s=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(t.Provider,{value:s},e.children)}},88294:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"schemas/usage/index","title":"Usage","description":"Schemas are objects that describe the items and attributes of an Entity:","source":"@site/docs/4-schemas/1-usage/index.md","sourceDirName":"4-schemas/1-usage","slug":"/schemas/usage/","permalink":"/docs/schemas/usage/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Usage"},"sidebar":"tutorialSidebar","previous":{"title":"DTO","permalink":"/docs/entities/actions/dto/"},"next":{"title":"Defaults & Links","permalink":"/docs/schemas/defaults-and-links/"}}');var o=n(74848),t=n(28453);const r={title:"Usage"},i="Schema",c={},d=[{value:"Schema Types",id:"schema-types",level:2},{value:"Schemas Props",id:"schemas-props",level:2},{value:"Validating Schemas",id:"validating-schemas",level:2},{value:"Using Schemas",id:"using-schemas",level:2}];function h(e){const s={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"schema",children:"Schema"})}),"\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"Schemas"})," are objects that describe the items and attributes of an ",(0,o.jsx)(s.a,{href:"/docs/entities/usage/",children:(0,o.jsx)(s.code,{children:"Entity"})}),":"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:"import { item } from 'dynamodb-toolbox/schema/item'\nimport { string } from 'dynamodb-toolbox/schema/string'\nimport { number } from 'dynamodb-toolbox/schema/number'\n\nconst pokemonSchema = item({\n  pokemonId: string().key(),\n  level: number().default(1),\n  pokeType: string()\n    .enum('fire', 'water', 'grass')\n    .optional()\n})\n\nconst PokemonEntity = new Entity({\n  ...,\n  schema: pokemonSchema\n})\n"})}),"\n",(0,o.jsxs)(s.admonition,{type:"info",children:[(0,o.jsxs)(s.p,{children:["Note that you can provide a ",(0,o.jsx)(s.a,{href:"/docs/schemas/map/",children:(0,o.jsx)(s.code,{children:"map"})})," schema to the ",(0,o.jsx)(s.code,{children:"Entity"})," constructor, although only its attributes will be kept (not its props):"]}),(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:"import { map } from 'dynamodb-toolbox/schema/map'\n\nconst pokemonSchema = map({\n  pokemonId: string().key(),\n  ...\n})\n\nconst PokemonEntity = new Entity({\n  ...,\n  schema: pokemonSchema\n})\n"})}),(0,o.jsxs)(s.p,{children:["See the ",(0,o.jsx)(s.a,{href:"/docs/schemas/map/",children:(0,o.jsx)(s.code,{children:"map"})})," documentation for more details."]})]}),"\n",(0,o.jsxs)(s.p,{children:["Schemas can be imported by their ",(0,o.jsx)(s.strong,{children:"dedicated exports"}),", or through the ",(0,o.jsx)(s.code,{children:"schema"})," or ",(0,o.jsx)(s.code,{children:"s"})," shorthands. For instance, those declarations output the same schema:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:"// \ud83d\udc47 More tree-shakable\nimport { string } from 'dynamodb-toolbox/schema/string'\n\nconst nameSchema = string()\n\n// \ud83d\udc47 Single import\nimport { schema, s } from 'dynamodb-toolbox/schema'\n\nconst nameSchema = schema.string()\nconst nameSchema = s.string()\n"})}),"\n",(0,o.jsx)(s.h2,{id:"schema-types",children:"Schema Types"}),"\n",(0,o.jsx)(s.p,{children:"Available schema types are:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"/docs/schemas/any/",children:(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:"any"})})})," - Describes any value"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"/docs/schemas/null/",children:(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:"null"})})})," - Describes ",(0,o.jsx)(s.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes",children:"null"})]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"/docs/schemas/boolean/",children:(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:"boolean"})})})," - Describes ",(0,o.jsx)(s.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes",children:"booleans"})]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"/docs/schemas/number/",children:(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:"number"})})}),": Describes ",(0,o.jsx)(s.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes",children:"numbers"})]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"/docs/schemas/string/",children:(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:"string"})})}),": Describes ",(0,o.jsx)(s.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes",children:"strings"})]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"/docs/schemas/binary/",children:(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:"binary"})})}),": Describes ",(0,o.jsx)(s.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes",children:"binaries"})]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"/docs/schemas/set/",children:(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:"set"})})}),": Describes ",(0,o.jsx)(s.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes",children:"sets"})," of either ",(0,o.jsx)(s.code,{children:"number"}),", ",(0,o.jsx)(s.code,{children:"string"}),", or ",(0,o.jsx)(s.code,{children:"binary"})," elements"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"/docs/schemas/list/",children:(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:"list"})})}),": Describes ",(0,o.jsx)(s.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes",children:"lists"})," of elements"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"/docs/schemas/item/",children:(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:"item"})})}),": Describes ",(0,o.jsx)(s.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html",children:"items"})," with a finite list of attributes, i.e. key-schema pairs - Should be at the root of ",(0,o.jsx)(s.code,{children:"Entity"})," schemas"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"/docs/schemas/map/",children:(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:"map"})})}),": Describes ",(0,o.jsx)(s.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes",children:"maps"})," - Similar to ",(0,o.jsx)(s.a,{href:"/docs/schemas/item/",children:(0,o.jsx)(s.code,{children:"items"})}),", but can be nested within other schemas"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"/docs/schemas/record/",children:(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:"record"})})}),": Describes a different kind of ",(0,o.jsx)(s.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes",children:"maps"})," - Records differ from ",(0,o.jsx)(s.code,{children:"maps"})," as they have a non-explicit (potentially infinite) range of keys, but with a single value type"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"/docs/schemas/any/",children:(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:"anyOf"})})}),": Describes a finite ",(0,o.jsx)(s.strong,{children:"union"})," of possible schemas"]}),"\n"]}),"\n",(0,o.jsx)(s.admonition,{type:"info",children:(0,o.jsxs)(s.p,{children:["DynamoDB-Toolbox schema types closely mirror the capabilities of DynamoDB. See the ",(0,o.jsx)(s.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes",children:"DynamoDB documentation"})," for more details."]})}),"\n",(0,o.jsx)(s.p,{children:"Note that some schema types can be defined with other schemas. For instance, here's a list of string:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:"const nameSchema = string()\nconst namesSchema = list(nameAttr)\n"})}),"\n",(0,o.jsx)(s.admonition,{type:"info",children:(0,o.jsxs)(s.p,{children:["Schemas are a standalone feature of DynamoDB-Toolbox (you can use them separately to ",(0,o.jsx)(s.a,{href:"/docs/schemas/actions/parse",children:"parse"})," and ",(0,o.jsx)(s.a,{href:"/docs/schemas/actions/format",children:"format"})," data for instance) and might even be moved into a separate library one day."]})}),"\n",(0,o.jsx)(s.h2,{id:"schemas-props",children:"Schemas Props"}),"\n",(0,o.jsxs)(s.p,{children:["You can update schema properties by using ",(0,o.jsx)(s.strong,{children:"dedicated methods"})," or by providing ",(0,o.jsx)(s.strong,{children:"input props"}),"."]}),"\n",(0,o.jsxs)(s.p,{children:["The former provides a ",(0,o.jsx)(s.strong,{children:"slick devX"})," with autocomplete and shorthands, while the latter theoretically requires ",(0,o.jsx)(s.strong,{children:"less compute time and memory usage"})," (although it should be negligible):"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:"// Using methods\nconst pokemonNameSchema = string().required('always')\n// Using input props\nconst pokemonNameSchema = string({ required: 'always' })\n"})}),"\n",(0,o.jsx)(s.admonition,{type:"info",children:(0,o.jsxs)(s.p,{children:["Methods do not mute the origin schema, but ",(0,o.jsx)(s.strong,{children:"return a new schema"})," (hence the impact in memory usage)."]})}),"\n",(0,o.jsxs)(s.p,{children:["The output of an schema method ",(0,o.jsx)(s.strong,{children:"is also a schema"}),", so you can ",(0,o.jsx)(s.strong,{children:"chain methods"}),":"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:"const pokeTypeSchema = string()\n  .required('always')\n  .enum('fire', 'water', 'grass')\n  .savedAs('t')\n"})}),"\n",(0,o.jsx)(s.h2,{id:"validating-schemas",children:"Validating Schemas"}),"\n",(0,o.jsxs)(s.p,{children:["You can inspect a schema's properties at runtime and through its types via the ",(0,o.jsx)(s.code,{children:"props"})," attribute:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:"const props = pokeTypeSchema.props\n// => {\n//  required: 'always',\n//  enum: ['fire', 'water', 'grass'],\n//  savedAs: 't'\n// }\n"})}),"\n",(0,o.jsxs)(s.p,{children:["You can use the ",(0,o.jsx)(s.code,{children:".check()"})," method to verify the validity of a schema:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:"pokeTypeSchema.check()\n\n// \ud83d\udc47 With path for clearer error messages\npokeTypeSchema.check('pokeType')\n"})}),"\n",(0,o.jsx)(s.admonition,{type:"info",children:(0,o.jsxs)(s.p,{children:["\u261d\ufe0f Checking a schema will also ",(0,o.jsx)(s.a,{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze",children:"freeze"})," its props."]})}),"\n",(0,o.jsx)(s.h2,{id:"using-schemas",children:"Using Schemas"}),"\n",(0,o.jsxs)(s.p,{children:["To allow for ",(0,o.jsx)(s.strong,{children:"extensibility"}),", ",(0,o.jsx)(s.strong,{children:"better code-splitting"})," and ",(0,o.jsx)(s.strong,{children:"lighter bundles"}),", schemas only expose a ",(0,o.jsx)(s.code,{children:".build(...)"})," method which acts as a gateway to perform Schema ",(0,o.jsx)(s.a,{href:"/docs/getting-started/usage/#how-do-actions-work",children:"Actions"}),":"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:"import { Parser } from 'dynamodb-toolbox/schema/actions/parse'\n\nconst pokeType = pokeTypeSchema.build(Parser).parse(string)\n"})})]})}function l(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);