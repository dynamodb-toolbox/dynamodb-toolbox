"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2578],{11470:(e,n,t)=>{t.d(n,{A:()=>v});var s=t(96540),a=t(18215),r=t(23104),o=t(56347),l=t(205),c=t(57485),i=t(31682),d=t(70679);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:a}}=e;return{value:n,label:t,attributes:s,default:a}}))}(t);return function(e){const n=(0,i.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(r),(0,s.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=h(e),[o,c]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:r}))),[i,u]=p({queryString:t,groupId:a}),[b,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,d.Dv)(t);return[a,(0,s.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),j=(()=>{const e=i??b;return m({value:e,tabValues:r})?e:null})();(0,l.A)((()=>{j&&c(j)}),[j]);return{selectedValue:o,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),x(e)}),[u,x,r]),tabValues:r}}var x=t(92303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function g(e){let{className:n,block:t,selectedValue:s,selectValue:o,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:i}=(0,r.a_)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),a=l[t].value;a!==s&&(i(n),o(a))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>c.push(e),onKeyDown:u,onClick:d,...r,className:(0,a.A)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function f(e){let{lazy:n,children:t,selectedValue:r}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===r));return e?(0,s.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function S(e){const n=b(e);return(0,y.jsxs)("div",{className:(0,a.A)("tabs-container",j.tabList),children:[(0,y.jsx)(g,{...n,...e}),(0,y.jsx)(f,{...n,...e})]})}function v(e){const n=(0,x.A)();return(0,y.jsx)(S,{...e,children:u(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var s=t(18215);const a={tabItem:"tabItem_Ymn6"};var r=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(a.tabItem,o),hidden:t,children:n})}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(96540);const a={},r=s.createContext(a);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},56779:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>c,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"tables/actions/spy/index","title":"Spy","description":"Enables spying the provided Table.","source":"@site/docs/2-tables/2-actions/10-spy/index.md","sourceDirName":"2-tables/2-actions/10-spy","slug":"/tables/actions/spy/","permalink":"/docs/tables/actions/spy/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Spy","sidebar_custom_props":{"sidebarActionType":"util"}},"sidebar":"tutorialSidebar","previous":{"title":"Parse Primary Key","permalink":"/docs/tables/actions/parse-primary-key/"},"next":{"title":"TableRepository","permalink":"/docs/tables/actions/repository/"}}');var a=t(74848),r=t(28453),o=t(11470),l=t(19365);const c={title:"Spy",sidebar_custom_props:{sidebarActionType:"util"}},i="TableSpy",d={},u=[{value:"Methods",id:"methods",level:2},{value:"<code>on(...)</code>",id:"on",level:3},{value:"<code>sent(...)</code>",id:"sent",level:3},{value:"<code>reset()</code>",id:"reset",level:3},{value:"<code>restore()</code>",id:"restore",level:3},{value:"Stub Methods",id:"stub-methods",level:2},{value:"<code>resolve(...)</code>",id:"resolve",level:3},{value:"<code>mock(...)</code>",id:"mock",level:3},{value:"<code>reject(...)</code>",id:"reject",level:3},{value:"Inspector methods",id:"inspector-methods",level:2},{value:"<code>count()</code>",id:"count",level:3},{value:"<code>allArgs()</code>",id:"allargs",level:3},{value:"<code>args(...)</code>",id:"args",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"tablespy",children:"TableSpy"})}),"\n",(0,a.jsxs)(n.p,{children:["Enables ",(0,a.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Mock_object",children:"spying"})," the provided ",(0,a.jsx)(n.code,{children:"Table"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"TableSpy"})," is useful for writing ",(0,a.jsx)(n.strong,{children:"unit tests"}),", allowing you to stub sendable actions (e.g. ",(0,a.jsx)(n.a,{href:"/docs/tables/actions/scan/",children:(0,a.jsx)(n.code,{children:"Scans"})})," and ",(0,a.jsx)(n.a,{href:"/docs/tables/actions/query/",children:(0,a.jsx)(n.code,{children:"Query"})}),"), mock their behavior, and inspect their call history:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { TableSpy } from 'dynamodb-toolbox/table/actions/spy'\n\nconst tableSpy = PokeTable.build(TableSpy)\n\n// \ud83d\ude4c Type-safe!\ntableSpy.on(ScanCommand).resolve({ Items: mockedItems })\n\nconst { Items } = await PokeTable.build(ScanCommand)\n  .options({ consistent: true })\n  .send()\n\nexpect(Items).toStrictEqual(mockedItems) // \u2705\n\nconst scanCount = tableSpy.sent(ScanCommand).count()\nexpect(scanCount).toBe(1) // \u2705\n\n// Reset history\ntableSpy.reset()\n\n// Stop spying\ntableSpy.restore()\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Non-mocked actions are sent as usual."})}),"\n",(0,a.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(n.h3,{id:"on",children:(0,a.jsx)(n.code,{children:"on(...)"})}),"\n",(0,a.jsx)("p",{style:{marginTop:"-15px"},children:(0,a.jsx)("i",{children:(0,a.jsx)("code",{children:"(Action: SENDABLE_ACTION) => Stub<TABLE, SENDABLE_ACTION>"})})}),"\n",(0,a.jsxs)(n.p,{children:["Enables stubbing a sendable action (see the ",(0,a.jsx)(n.a,{href:"#stub-methods",children:"stub section"})," section for more details):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { ScanCommand } from 'dynamodb-toolbox/table/actions/scan'\n\nconst scanStub = tableSpy.on(ScanCommand)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"sent",children:(0,a.jsx)(n.code,{children:"sent(...)"})}),"\n",(0,a.jsx)("p",{style:{marginTop:"-15px"},children:(0,a.jsx)("i",{children:(0,a.jsx)("code",{children:"(Action: SENDABLE_ACTION) => Inspector<TABLE, SENDABLE_ACTION>"})})}),"\n",(0,a.jsxs)(n.p,{children:["Enables inspecting a sendable action call history (see the ",(0,a.jsx)(n.a,{href:"#inspector-methods",children:"inspector section"})," section for more details):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { ScanCommand } from 'dynamodb-toolbox/table/actions/scan'\n\nconst scanInspector = tableSpy.sent(ScanCommand)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"reset",children:(0,a.jsx)(n.code,{children:"reset()"})}),"\n",(0,a.jsx)("p",{style:{marginTop:"-15px"},children:(0,a.jsx)("i",{children:(0,a.jsx)("code",{children:"() => Spy<TABLE>"})})}),"\n",(0,a.jsx)(n.p,{children:"Reset the call history for all actions:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"expect(scanInspector.count()).toBe(1) // \u2705\n\ntableSpy.reset()\n\nexpect(scanInspector.count()).toBe(0) // \u2705\n\n// The method returns the spy, so you can chain a new stub:\ntableSpy.reset().on(ScanCommand).resolve({ Items: [...] })\n"})}),"\n",(0,a.jsx)(n.h3,{id:"restore",children:(0,a.jsx)(n.code,{children:"restore()"})}),"\n",(0,a.jsx)("p",{style:{marginTop:"-15px"},children:(0,a.jsx)("i",{children:(0,a.jsx)("code",{children:"() => void"})})}),"\n",(0,a.jsxs)(n.p,{children:["Stop spying the ",(0,a.jsx)(n.code,{children:"Table"})," altogether:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// After this point, the spy is not able to intercept any action\ntableSpy.restore()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"stub-methods",children:"Stub Methods"}),"\n",(0,a.jsx)(n.h3,{id:"resolve",children:(0,a.jsx)(n.code,{children:"resolve(...)"})}),"\n",(0,a.jsx)("p",{style:{marginTop:"-15px"},children:(0,a.jsx)("i",{children:(0,a.jsx)("code",{children:"(responseMock: Response<ACTION>) => Spy<TABLE>"})})}),"\n",(0,a.jsxs)(n.p,{children:["Mocks the response of a sendable action ",(0,a.jsx)(n.code,{children:".send()"})," method:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// \ud83d\ude4c Type-safe!\ntableSpy.on(ScanCommand).resolve({ Items: mockedItems })\n\nconst { Items } = await PokeTable.build(ScanCommand).send()\n\nexpect(Items).toStrictEqual(mockedItems) // \u2705\n"})}),"\n",(0,a.jsx)(n.h3,{id:"mock",children:(0,a.jsx)(n.code,{children:"mock(...)"})}),"\n",(0,a.jsx)("p",{style:{marginTop:"-15px"},children:(0,a.jsx)("i",{children:(0,a.jsx)("code",{children:"(mock: ((...args: Args<ACTION>) => Promisable<Response<ACTION>> | undefined)) => Spy<TABLE>"})})}),"\n",(0,a.jsxs)(n.p,{children:["Mocks the implementation of a sendable action ",(0,a.jsx)(n.code,{children:".send()"})," method (synchronously or asynchronously), enabling you to return dynamic responses:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// \ud83d\ude4c Type-safe!\ntableSpy.on(ScanCommand).mock((entities, options) => {\n  if (\n    entities.length === 1 &&\n    entities[0] === PokemonEntity\n  ) {\n    return { Items: mockedPokemons }\n  }\n})\n\nconst { Items } = await PokeTable.build(ScanCommand)\n  .entities(PokemonEntity)\n  .send()\n\nexpect(Items).toStrictEqual(mockedPokemons) // \u2705\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Returning ",(0,a.jsx)(n.code,{children:"undefined"})," is possible and lets the action proceed as usual."]})}),"\n",(0,a.jsx)(n.h3,{id:"reject",children:(0,a.jsx)(n.code,{children:"reject(...)"})}),"\n",(0,a.jsx)("p",{style:{marginTop:"-15px"},children:(0,a.jsx)("i",{children:(0,a.jsx)("code",{children:"(error?: string | Error | AwsError) => Spy<TABLE>"})})}),"\n",(0,a.jsxs)(n.p,{children:["Simulates an error during the execution of a sendable action ",(0,a.jsx)(n.code,{children:".send()"})," method:"]}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(l.A,{value:"any",label:"Any error",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"tableSpy.on(ScanCommand).reject()\n\nawait expect(() =>\n  PokeTable.build(ScanCommand).send()\n).rejects.toThrow() // \u2705\n"})})}),(0,a.jsx)(l.A,{value:"message",label:"Message",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"tableSpy.on(ScanCommand).reject('Fake error')\n\nawait expect(() =>\n  PokeTable.build(ScanCommand).send()\n).rejects.toThrow('Fake error') // \u2705\n"})})}),(0,a.jsx)(l.A,{value:"getter",label:"AWS Error",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"tableSpy.on(ScanCommand).reject({\n  Name: 'ServiceUnavailable',\n  Code: '503',\n  Message: 'Service is unable to handle request.',\n  $fault: 'server',\n  $service: 'DynamoDB'\n})\n\nawait expect(() =>\n  PokeTable.build(ScanCommand).send()\n).rejects.toThrow({ Name: 'ServiceUnavailable' }) // \u2705\n"})})})]}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsx)(n.p,{children:"Stub methods return the original spy, so you can easily chain them:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"tableSpy\n  .on(ScanCommand)\n  .resolve({ Items: [...] })\n  .on(QueryCommand)\n  .reject('Some error')\n"})})]}),"\n",(0,a.jsx)(n.h2,{id:"inspector-methods",children:"Inspector methods"}),"\n",(0,a.jsx)(n.h3,{id:"count",children:(0,a.jsx)(n.code,{children:"count()"})}),"\n",(0,a.jsx)("p",{style:{marginTop:"-15px"},children:(0,a.jsx)("i",{children:(0,a.jsx)("code",{children:"() => number"})})}),"\n",(0,a.jsx)(n.p,{children:"Returns the number of times the action was sent:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"tableSpy.on(ScanCommand).resolve({ Items: mockedItems })\n\nconst { Items } = await PokeTable.build(ScanCommand).send()\n\nconst count = tableSpy.sent(ScanCommand).count()\n\nexpect(count).toBe(1) // \u2705\n"})}),"\n",(0,a.jsx)(n.h3,{id:"allargs",children:(0,a.jsx)(n.code,{children:"allArgs()"})}),"\n",(0,a.jsx)("p",{style:{marginTop:"-15px"},children:(0,a.jsx)("i",{children:(0,a.jsx)("code",{children:"() => Args<ACTION>[]"})})}),"\n",(0,a.jsx)(n.p,{children:"Returns the arguments of the sendable action call history:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"tableSpy.on(ScanCommand).resolve({})\n\nawait PokeTable.build(ScanCommand)\n  .entities(PokemonEntity)\n  .options({ consistent: true })\n  .send()\nawait PokeTable.build(ScanCommand)\n  .entities(TrainerEntity)\n  .send()\n\nconst allArgs = tableSpy.sent(ScanCommand).allArgs()\n\nexpect(allArgs).toStrictEqual([\n  // First call\n  [PokemonEntity, { consistent: true }],\n  // Second call\n  [TrainerEntity, {}]\n]) // \u2705\n"})}),"\n",(0,a.jsx)(n.h3,{id:"args",children:(0,a.jsx)(n.code,{children:"args(...)"})}),"\n",(0,a.jsx)("p",{style:{marginTop:"-15px"},children:(0,a.jsx)("i",{children:(0,a.jsx)("code",{children:"(index: number) => Args<ACTION>"})})}),"\n",(0,a.jsx)(n.p,{children:"Returns the arguments of the n-th action of the call history:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"tableSpy.on(ScanCommand).resolve({})\n\nawait PokeTable.build(ScanCommand)\n  .entities(PokemonEntity)\n  .options({ consistent: true })\n  .send()\nawait PokeTable.build(ScanCommand)\n  .entities(TrainerEntity)\n  .send()\n\nconst firstArgs = tableSpy.sent(ScanCommand).args(0)\n\nexpect(firstArgs).toStrictEqual([\n  PokemonEntity,\n  { consistent: true }\n]) // \u2705\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Note that the index is zero-based."})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);