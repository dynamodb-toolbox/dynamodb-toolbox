"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[217],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var a=t(96540);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}},29004:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"introduction/quick-start","title":"Quick Start","description":"Install DynamoDB Toolbox using aws-sdk v3 (>=v0.8.0) (recommended)","source":"@site/versioned_docs/version-v0.9/1-introduction/2-quick-start.md","sourceDirName":"1-introduction","slug":"/introduction/quick-start","permalink":"/docs/v0.9/introduction/quick-start","draft":false,"unlisted":false,"tags":[],"version":"v0.9","sidebarPosition":2,"frontMatter":{"title":"Quick Start"},"sidebar":"tutorialSidebar","previous":{"title":"What is DynamoDB Toolbox?","permalink":"/docs/v0.9/introduction/what-is-dynamodb-toolbox"},"next":{"title":"Overview","permalink":"/docs/v0.9/table/overview"}}');var i=t(74848),s=t(28453);const o={title:"Quick Start"},d="Quick Start",r={},l=[{value:"Install DynamoDB Toolbox using aws-sdk v3 (&gt;=v0.8.0) (recommended)",id:"install-dynamodb-toolbox-using-aws-sdk-v3-v080-recommended",level:2},{value:"Install DynamoDB Toolbox using aws-sdk v2 (&lt;v0.8.0)",id:"install-dynamodb-toolbox-using-aws-sdk-v2-v080",level:2},{value:"Add to your code",id:"add-to-your-code",level:2},{value:"Load the DocumentClient using aws-sdk v3 (&gt;=v0.8.0)",id:"load-the-documentclient-using-aws-sdk-v3-v080",level:2},{value:"Load the DocumentClient using aws-sdk v2 (&lt;v0.8.0)",id:"load-the-documentclient-using-aws-sdk-v2-v080",level:2},{value:"Define a Table",id:"define-a-table",level:2},{value:"Define an Entity",id:"define-an-entity",level:2},{value:"Put an item",id:"put-an-item",level:2},{value:"Get an Item",id:"get-an-item",level:2},{value:"Entity Type Inference",id:"entity-type-inference",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,i.jsx)(n.h2,{id:"install-dynamodb-toolbox-using-aws-sdk-v3-v080-recommended",children:"Install DynamoDB Toolbox using aws-sdk v3 (>=v0.8.0) (recommended)"}),"\n",(0,i.jsx)(n.p,{children:"Using your favorite package manager, install DynamoDB Toolbox and aws-sdk v3 in your project by running one of the following commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# npm\nnpm i dynamodb-toolbox\nnpm install @aws-sdk/lib-dynamodb @aws-sdk/client-dynamodb\n\n# yarn\nyarn add dynamodb-toolbox\nyarn add @aws-sdk/lib-dynamodb @aws-sdk/client-dynamodb\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"install-dynamodb-toolbox-using-aws-sdk-v2-v080",children:"Install DynamoDB Toolbox using aws-sdk v2 (<v0.8.0)"}),"\n",(0,i.jsx)(n.p,{children:"Using your favorite package manager, install DynamoDB Toolbox and aws-sdk v2 in your project by running one of the following commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# npm\nnpm i dynamodb-toolbox\nnpm install aws-sdk\n\n# yarn\nyarn add dynamodb-toolbox\nyarn add aws-sdk\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"add-to-your-code",children:"Add to your code"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"dynamodb-toolbox"})," package exports ",(0,i.jsx)(n.code,{children:"Table"})," and ",(0,i.jsx)(n.code,{children:"Entity"})," classes. Import or require them into your code as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="JavaScript"',children:"const { Table, Entity } = require('dynamodb-toolbox')\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"import { Table, Entity } from 'dynamodb-toolbox'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"load-the-documentclient-using-aws-sdk-v3-v080",children:"Load the DocumentClient using aws-sdk v3 (>=v0.8.0)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"import {\n  DynamoDB,\n  DynamoDBClient\n} from '@aws-sdk/client-dynamodb'\nimport { DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb'\n\nconst marshallOptions = {\n  // Specify your client options as usual\n  convertEmptyValues: false\n}\n\nconst translateConfig = { marshallOptions }\n\nexport const DocumentClient = DynamoDBDocumentClient.from(\n  new DynamoDBClient(),\n  translateConfig\n)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"load-the-documentclient-using-aws-sdk-v2-v080",children:"Load the DocumentClient using aws-sdk v2 (<v0.8.0)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"import DynamoDB from 'aws-sdk/clients/dynamodb'\n\nconst DocumentClient = new DynamoDB.DocumentClient({\n  // Specify your client options as usual\n  convertEmptyValues: false\n})\n"})}),"\n",(0,i.jsx)(n.h2,{id:"define-a-table",children:"Define a Table"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Instantiate a table\nconst MyTable = new Table({\n  // Specify table name (used by DynamoDB)\n  name: 'my-table',\n\n  // Define partition and sort keys\n  partitionKey: 'pk',\n  sortKey: 'sk',\n\n  // Add the DocumentClient\n  DocumentClient\n})\n"})}),"\n",(0,i.jsx)(n.h2,{id:"define-an-entity",children:"Define an Entity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const Customer = new Entity({\n  // Specify entity name\n  name: 'Customer',\n\n  // Define attributes\n  attributes: {\n    id: { partitionKey: true }, // flag as partitionKey\n    sk: { hidden: true, sortKey: true }, // flag as sortKey and mark hidden\n    age: { type: 'number' }, // set the attribute type\n    name: { type: 'string', map: 'data' }, // map 'name' to table attribute 'data'\n    emailVerified: { type: 'boolean', required: true }, // specify attribute as required\n    co: { alias: 'company' }, // alias table attribute 'co' to 'company'\n    status: ['sk', 0], // composite key mapping\n    date_added: ['sk', 1] // composite key mapping\n  },\n\n  // Assign it to our table\n  table: MyTable\n\n  // In Typescript, the \"as const\" statement is needed for type inference\n} as const)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"put-an-item",children:"Put an item"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Create an item (using table attribute names or aliases)\nconst customer = {\n  id: 123,\n  age: 35,\n  name: 'Jane Smith',\n  emailVerified: true,\n  company: 'ACME',\n  status: 'active',\n  date_added: '2020-04-24'\n}\n\n// Use the 'put' method of Customer:\nawait Customer.put(customer)\n"})}),"\n",(0,i.jsx)(n.p,{children:"The item will be saved to DynamoDB like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'{\n  "pk": 123,\n  "sk": "active#2020-04-24",\n  "age": 35,\n  "data": "Jane Smith",\n  "emailVerified": true,\n  "co": "ACME",\n  // Attributes auto-generated by DynamoDB-Toolbox\n  "_et": "customer", // Entity name (required for parsing)\n  "_ct": "2021-01-01T00:00:00.000Z", // Item creation date (optional)\n  "_md": "2021-01-01T00:00:00.000Z" // Item last modification date (optional)\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"get-an-item",children:"Get an Item"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Specify primary key\nconst primaryKey = {\n  id: 123,\n  status: 'active',\n  date_added: '2020-04-24'\n}\n\n// Use the 'get' method of Customer\nconst response = await Customer.get(primaryKey)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"entity-type-inference",children:"Entity Type Inference"}),"\n",(0,i.jsx)(n.p,{children:"Since v0.4, the method inputs, options and response types are inferred from the Entity definition:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"await Customer.put({\n  id: 123,\n  // \u274c Sort key is required (\"sk\" or both \"status\" and \"date_added\")\n  age: 35,\n  name: ['Jane', 'Smith'], // \u274c name should be a string\n  emailVerified: undefined, // \u274c attribute is marked as required\n  company: 'ACME'\n})\n\nconst { Item: customer } = await Customer.get({\n  id: 123,\n  status: 'active',\n  date_added: '2020-04-24' // \u2705 Valid primary key\n})\ntype Customer = typeof customer\n// \ud83d\ude4c Type is equal to:\ntype ExpectedCustomer =\n  | {\n      id: any\n      age?: number | undefined\n      name?: string | undefined\n      emailVerified: boolean\n      company?: any\n      status: any\n      date_added: any\n      entity: string\n      created: string\n      modified: string\n    }\n  | undefined\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);