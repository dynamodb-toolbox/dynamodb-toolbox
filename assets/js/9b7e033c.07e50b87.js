"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4211],{89310:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"v0.9","label":"v0.9","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-v0.9","isLast":false,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Introduction","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"What is DynamoDB Toolbox?","href":"/docs/v0.9/introduction/what-is-dynamodb-toolbox","docId":"introduction/what-is-dynamodb-toolbox","unlisted":false},{"type":"link","label":"Quick Start","href":"/docs/v0.9/introduction/quick-start","docId":"introduction/quick-start","unlisted":false}]},{"type":"category","label":"Table Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/v0.9/table/overview","docId":"table/overview","unlisted":false},{"type":"link","label":"Properties","href":"/docs/v0.9/table/properties","docId":"table/properties","unlisted":false},{"type":"link","label":"Methods","href":"/docs/v0.9/table/methods","docId":"table/methods","unlisted":false}]},{"type":"category","label":"Entity Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/v0.9/entity/overview","docId":"entity/overview","unlisted":false},{"type":"link","label":"Properties","href":"/docs/v0.9/entity/properties","docId":"entity/properties","unlisted":false},{"type":"link","label":"Methods","href":"/docs/v0.9/entity/methods","docId":"entity/methods","unlisted":false}]},{"type":"link","label":"Filters & Conditions","href":"/docs/v0.9/filters-and-conditions/","docId":"filters-and-conditions/index","unlisted":false},{"type":"link","label":"Projection Expressions","href":"/docs/v0.9/projection-expressions/","docId":"projection-expressions/index","unlisted":false},{"type":"link","label":"Custom Parameters and Clauses","href":"/docs/v0.9/custom-parameters/","docId":"custom-parameters/index","unlisted":false},{"type":"link","label":"Type Inference","href":"/docs/v0.9/type-inference/","docId":"type-inference/index","unlisted":false},{"type":"link","label":"Contributing","href":"/docs/v0.9/contributing/","docId":"contributing/index","unlisted":false},{"type":"link","label":"Migration Guide","href":"/docs/v0.9/migration-guide/","docId":"migration-guide/index","unlisted":false}]},"docs":{"contributing/index":{"id":"contributing/index","title":"Contributing","description":"npm","sidebar":"tutorialSidebar"},"custom-parameters/index":{"id":"custom-parameters/index","title":"Custom Parameters and Clauses","description":"This library supports all API options for the available API methods, so it is unnecessary for you to provide additional parameters. However, if you would like to pass custom parameters, simply pass them in an object as the last parameter to any appropriate method.","sidebar":"tutorialSidebar"},"entity/methods":{"id":"entity/methods","title":"Methods","description":"attribute","sidebar":"tutorialSidebar"},"entity/overview":{"id":"entity/overview","title":"Overview","description":"An Entity represent a well-defined schema for a DynamoDB item. An Entity can represent things like a User, an Order, an Invoice Line Item, a Configuration Object, or whatever else you want. Each Entity defined with the DynamoDB Toolbox must be attached to a Table. An Entity defines its own attributes, but can share these attributes with other entities on the same table (either explicitly or coincidentally). Entities must flag an attribute as a partitionKey and if enabled on the table, a sortKey as well.","sidebar":"tutorialSidebar"},"entity/properties":{"id":"entity/properties","title":"Properties","description":"The following properties are available on instances of the Entity Class. Certain properties can be changed by directly setting the property value. See below for a list of properties and their descriptions.","sidebar":"tutorialSidebar"},"filters-and-conditions/index":{"id":"filters-and-conditions/index","title":"Filters & Conditions","description":"DynamoDB supports Filter and Condition expressions. Filter Expressions are used to limit data returned by query and scan operations. Condition Expressions are used for data manipulation operations (put, update, delete and batchWrite), allowing you to specify a condition to determine which items should be modified.","sidebar":"tutorialSidebar"},"introduction/quick-start":{"id":"introduction/quick-start","title":"Quick Start","description":"Install DynamoDB Toolbox using aws-sdk v3 (>=v0.8.0) (recommended)","sidebar":"tutorialSidebar"},"introduction/what-is-dynamodb-toolbox":{"id":"introduction/what-is-dynamodb-toolbox","title":"What is DynamoDB Toolbox?","description":"DynamoDB Toolbox is a set of tools that makes it easy to work with Amazon DynamoDB and the DocumentClient. It\'s designed with Single Tables in mind, but works just as well with multiple tables. It lets you define your Entities (with typings and aliases) and map them to your DynamoDB tables. You can then generate the API parameters to put, get, delete, update, query, scan, batchGet, and batchWrite data by passing in JavaScript objects. The DynamoDB Toolbox will map aliases, validate and coerce types, and even write complex UpdateExpressions for you. \ud83d\ude09","sidebar":"tutorialSidebar"},"migration-guide/index":{"id":"migration-guide/index","title":"Migration Guide","description":"If you used the v0 of DynamoDB-Toolbox, here are the changes you need to be aware of when migrating to the v1.","sidebar":"tutorialSidebar"},"projection-expressions/index":{"id":"projection-expressions/index","title":"Projection Expressions","description":"DynamoDB supports Projection Expressions that allow you to selectively return attributes when using the get, query or scan operations.","sidebar":"tutorialSidebar"},"table/methods":{"id":"table/methods","title":"Methods","description":"query","sidebar":"tutorialSidebar"},"table/overview":{"id":"table/overview","title":"Overview","description":"A Table represents a one-to-one mappings to your DynamoDB table. They contain information about your table\'s name, primary keys, indexes, and more. They are also used to organize and coordinate operations between entities. Tables support a number of methods that allow you to interact with your entities including performing queries, scans, batch gets and batch writes.","sidebar":"tutorialSidebar"},"table/properties":{"id":"table/properties","title":"Properties","description":"The following properties are available on instances of the Table Class. Properties can be changed by directly setting the property value:","sidebar":"tutorialSidebar"},"type-inference/index":{"id":"type-inference/index","title":"Type Inference","description":"Since the v0.4, most Entity methods types are inferred from an Entity definition. This is still experimental and may change in the future.","sidebar":"tutorialSidebar"}}}}')}}]);