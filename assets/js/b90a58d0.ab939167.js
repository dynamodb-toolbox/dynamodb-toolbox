"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9994],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(96540);const a={},r=t.createContext(a);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},68779:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"entities/actions/parse-paths/index","title":"ParsePaths","description":"Builds a Projection Expression that can be used to filter the returned attributes of a read operation like a GetItem, Query or Scan:","source":"@site/docs/3-entities/4-actions/20-parse-paths/index.md","sourceDirName":"3-entities/4-actions/20-parse-paths","slug":"/entities/actions/parse-paths/","permalink":"/docs/entities/actions/parse-paths/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ParsePaths","sidebar_custom_props":{"sidebarActionType":"util"}},"sidebar":"tutorialSidebar","previous":{"title":"ParseCondition","permalink":"/docs/entities/actions/parse-condition/"},"next":{"title":"Format","permalink":"/docs/entities/actions/format/"}}');var a=s(74848),r=s(28453);const o={title:"ParsePaths",sidebar_custom_props:{sidebarActionType:"util"}},i="PathParser",d={},c=[{value:"Methods",id:"methods",level:2},{value:"<code>transform(...)</code>",id:"transform",level:3},{value:"<code>express(...)</code>",id:"express",level:3},{value:"<code>parse(...)</code>",id:"parse",level:3},{value:"Paths",id:"paths",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"pathparser",children:"PathParser"})}),"\n",(0,a.jsxs)(n.p,{children:["Builds a ",(0,a.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ProjectionExpressions.html",children:"Projection Expression"})," that can be used to filter the returned attributes of a read operation like a ",(0,a.jsx)(n.a,{href:"/docs/entities/actions/get-item/",children:"GetItem"}),", ",(0,a.jsx)(n.a,{href:"/docs/tables/actions/query/",children:"Query"})," or ",(0,a.jsx)(n.a,{href:"/docs/tables/actions/scan/",children:"Scan"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { PathParser } from 'dynamodb-toolbox/entity/actions/parsePaths'\n\n// \ud83d\udc47 To be used in DynamoDB commands\nconst { ProjectionExpression, ExpressionAttributeNames } =\n  PokemonEntity.build(PathParser).parse(['name', 'level'])\n"})}),"\n",(0,a.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(n.h3,{id:"transform",children:(0,a.jsx)(n.code,{children:"transform(...)"})}),"\n",(0,a.jsx)("p",{style:{marginTop:"-15px"},children:(0,a.jsx)("i",{children:(0,a.jsx)("code",{children:"(paths: Path<ENTITY>[], opt?: Options) => string[]"})})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Validates the paths"})," for the provided ",(0,a.jsx)(n.code,{children:"Entity"})," and ",(0,a.jsx)(n.strong,{children:"transforms them"})," to match the underlying data if needed:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const pokemonSchema = item({\n  name: string(),\n  level: number().savedAs('_l')\n  ...\n})\n\nPokemonEntity.build(PathParser).transform(['name', 'level'])\n// => ['name', '_l']\n"})}),"\n",(0,a.jsxs)(n.p,{children:["By default, the method expects all the paths to be valid for the provided ",(0,a.jsx)(n.code,{children:"Entity"})," and throws an ",(0,a.jsx)(n.code,{children:"invalidExpressionAttributePath"})," error if not. You can unset the ",(0,a.jsx)(n.code,{children:"strict"})," option to skip invalid paths:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const pokemonSchema = item({\n  name: string(),\n  level: number().savedAs('_l')\n  ...\n})\n\nPokemonEntity.build(PathParser).transform(\n  ['name', 'level', 'unknown.path'],\n  { strict: false }\n)\n// => ['name', '_l']\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsxs)(n.p,{children:["Note that the ",(0,a.jsx)(n.code,{children:"transform(...)"})," method ",(0,a.jsx)(n.strong,{children:"may add paths"})," if several options of an ",(0,a.jsx)(n.a,{href:"/docs/schemas/anyOf/",children:(0,a.jsx)(n.code,{children:"anyOf"})})," attribute match a provided path:"]}),(0,a.jsxs)(s,{className:"details-in-admonition",children:[(0,a.jsxs)("summary",{children:["\ud83d\udd0e ",(0,a.jsx)("b",{children:"Show example"})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const pokemonSchema = item({\n  meta: anyOf(\n    map({ description: string() }),\n    map({ description: string().savedAs('d') })\n    ...\n  )\n  ...\n})\n\nPokemonEntity.build(PathParser).transform(['meta.description'])\n// => ['meta.description', 'meta.d']\n"})})]})]}),"\n",(0,a.jsx)(n.h3,{id:"express",children:(0,a.jsx)(n.code,{children:"express(...)"})}),"\n",(0,a.jsx)("p",{style:{marginTop:"-15px"},children:(0,a.jsx)("i",{children:(0,a.jsxs)("code",{children:[(0,a.jsx)("b",{children:"static"})," (paths: string[]) => ProjectionExpression"]})})}),"\n",(0,a.jsxs)(n.p,{children:["Translates ",(0,a.jsx)(n.strong,{children:"any path list"})," to a DynamoDB ",(0,a.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ProjectionExpressions.html",children:"Projection Expression"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"PathParser.express(['name', 'level'])\n// => {\n//   ProjectionExpression: '#p_1, #p_2',\n//   ExpressionAttributeNames: {\n//     '#p_1': 'name',\n//     '#p_2': 'level'\n//   },\n// }\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsxs)(n.p,{children:["The method's static nature emphasizes that it ",(0,a.jsx)(n.strong,{children:"does not validate the paths"}),". It should only be used on ",(0,a.jsx)(n.a,{href:"#transform",children:(0,a.jsx)(n.code,{children:"transformed"})})," paths."]})}),"\n",(0,a.jsx)(n.h3,{id:"parse",children:(0,a.jsx)(n.code,{children:"parse(...)"})}),"\n",(0,a.jsx)("p",{style:{marginTop:"-15px"},children:(0,a.jsx)("i",{children:(0,a.jsx)("code",{children:"(paths: Path<ENTITY>[]) => ProjectionExpression"})})}),"\n",(0,a.jsxs)(n.p,{children:["Subsequently ",(0,a.jsx)(n.a,{href:"#transform",children:(0,a.jsx)(n.code,{children:"transform"})})," and ",(0,a.jsx)(n.a,{href:"#express",children:(0,a.jsx)(n.code,{children:"express"})})," paths for the provided ",(0,a.jsx)(n.code,{children:"Entity"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"PokemonEntity.build(PathParser).parse(['name', 'level'])\n// => {\n//   ProjectionExpression: '#p_1, #p_2',\n//   ExpressionAttributeNames: {\n//     '#p_1': 'name',\n//     '#p_2': 'level'\n//   },\n// }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"paths",children:"Paths"}),"\n",(0,a.jsxs)(n.p,{children:["The path syntax from DynamoDB-Toolbox follows the ",(0,a.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ProjectionExpressions.html",children:"DynamoDB specifications"}),", while making it ",(0,a.jsx)(n.strong,{children:"type-safe"})," and ",(0,a.jsx)(n.strong,{children:"simpler"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import type { EntityPaths } from 'dynamodb-toolbox/entity/actions/parsePaths'\n\ntype PokemonPath = EntityPaths<typeof PokemonEntity>\n\nconst namePath: PokemonPath = 'name'\n\nconst deepListPath: PokemonPath = 'pokeTypes[0]'\n\nconst deepMapOrRecordPath: PokemonPath = 'weaknesses.fire'\n// \ud83d\udc47 Similar to\nconst deepMapOrRecordPath: PokemonPath = `weaknesses['fire']`\n\n// \ud83d\udc47 Use this syntax to escape special chars (e.g. in `records`)\nconst deepRecordPath: PokemonPath = `meta['any[char]-you.want!']`\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);