"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1873],{11470:(e,n,t)=>{t.d(n,{A:()=>g});var r=t(96540),s=t(18215),a=t(23104),i=t(56347),o=t(205),l=t(57485),d=t(31682),c=t(70679);function m(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return m(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:s}}=e;return{value:n,label:t,attributes:r,default:s}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const s=(0,i.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(s.location.search);n.set(a,e),s.replace({...s.location,search:n.toString()})}),[a,s])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,a=u(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:a}))),[d,m]=h({queryString:t,groupId:s}),[f,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,a]=(0,c.Dv)(t);return[s,(0,r.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:s}),x=(()=>{const e=d??f;return p({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{x&&l(x)}),[x]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),m(e),b(e)}),[m,b,a]),tabValues:a}}var b=t(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function j(e){let{className:n,block:t,selectedValue:r,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.a_)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),s=o[t].value;s!==r&&(d(n),i(s))},m=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:m,onClick:c,...a,className:(0,s.A)("tabs__item",x.tabItem,a?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function I(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function v(e){const n=f(e);return(0,y.jsxs)("div",{className:(0,s.A)("tabs-container",x.tabList),children:[(0,y.jsx)(j,{...n,...e}),(0,y.jsx)(I,{...n,...e})]})}function g(e){const n=(0,b.A)();return(0,y.jsx)(v,{...e,children:m(e.children)},String(n))}},18967:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"entities/type-inference/index","title":"Type Inference","description":"DynamoDB-Toolbox exposes several generic types to infer custom types from your entities.","source":"@site/versioned_docs/version-v1/3-entities/3-type-inference/index.md","sourceDirName":"3-entities/3-type-inference","slug":"/entities/type-inference/","permalink":"/docs/v1/entities/type-inference/","draft":false,"unlisted":false,"tags":[],"version":"v1","frontMatter":{"title":"Type Inference"},"sidebar":"tutorialSidebar","previous":{"title":"Internal Attributes","permalink":"/docs/v1/entities/internal-attributes/"},"next":{"title":"GetItem","permalink":"/docs/v1/entities/actions/get-item/"}}');var s=t(74848),a=t(28453),i=t(11470),o=t(19365);const l={title:"Type Inference"},d="Type Inference",c={},m=[{value:"Writes",id:"writes",level:2},{value:"Reads",id:"reads",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"type-inference",children:"Type Inference"})}),"\n",(0,s.jsxs)(n.p,{children:["DynamoDB-Toolbox exposes several generic types to ",(0,s.jsx)(n.strong,{children:"infer custom types"})," from your entities."]}),"\n",(0,s.jsxs)(n.p,{children:["Which one you should use depends on your usage context, for instance, whether it\u2019s within a ",(0,s.jsx)(n.a,{href:"#writes",children:"write"})," or a ",(0,s.jsx)(n.a,{href:"#reads",children:"read"})," operation."]}),"\n",(0,s.jsx)(n.h2,{id:"writes",children:"Writes"}),"\n",(0,s.jsx)(n.p,{children:"For write operations, DynamoDB-Toolbox exposes the following generic types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ValidItem"}),": A valid entity item"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"InputItem"}),": Similar to ",(0,s.jsx)(n.code,{children:"ValidItem"}),", but with defaulted and linked attributes optional"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TransformedItem"}),": A valid entity item after transformation"]}),"\n"]}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart LR\n  classDef mmddescription fill:none,stroke:none\n  classDef mmdcontainer fill:#eee4,stroke-width:1px,stroke-dasharray:3,stroke:#ccc,font-weight:bold,font-size:large\n\n  InputItem["<b>InputItem</b><br/><i>(+ KeyInputItem)</i>"]\n\n  subgraph Fill[ ]\n    FillDescription["<b>Fill</b>"]:::mmddescription\n    fillDescr("<span>+ defaults<br/>+ links</span>"):::mmddescription\n  end\n  Fill:::mmdcontainer\n\n  ValidItem["<b>ValidItem</b>"]\n\n  InputItem .- FillDescription\n  FillDescription .-> ValidItem\n\n  subgraph Transform[ ]\n    TransformDescription["<b>Transform</b>"]:::mmddescription\n    transformDescr(+ renaming<br/>+ transforms):::mmddescription\n  end\n  Transform:::mmdcontainer\n\n  TransformedItem["<b>TransformedItem</b><br/><i>(+ SavedItem)</i>"]\n\n  ValidItem .- TransformDescription\n  TransformDescription .-> TransformedItem\n'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import type {\n  InputItem,\n  ValidItem,\n  TransformedItem\n} from 'dynamodb-toolbox/entity'\n\ntype Input = InputItem<typeof PokemonEntity>\ntype Valid = ValidItem<typeof PokemonEntity>\ntype Transformed = TransformedItem<typeof PokemonEntity>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["By default, those generics use the ",(0,s.jsx)(n.code,{children:"put"})," write mode, but you can switch to the ",(0,s.jsx)(n.code,{children:"key"})," or ",(0,s.jsx)(n.code,{children:"update"})," modes with the ",(0,s.jsx)(n.code,{children:"mode"})," option. This impacts which the presence and requiredness of attributes:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type ValidKey = ValidItem<\n  typeof PokemonEntity,\n  { mode: 'key' }\n>\ntype ValidUpdate = ValidItem<\n  typeof PokemonEntity,\n  { mode: 'update' }\n>\n"})}),"\n",(0,s.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,s.jsxs)(n.p,{children:["Here are ",(0,s.jsx)(n.strong,{children:"step-by-step"})," examples:"]}),(0,s.jsxs)(t,{className:"details-in-admonition",children:[(0,s.jsxs)("summary",{children:["\u261d\ufe0f ",(0,s.jsx)("b",{children:"Entity"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const PokemonEntity = new Entity({\n  table,\n  schema: schema({\n    // key attributes\n    pokemonClass: string()\n      .key()\n      .transform(prefix('POKEMON'))\n      .savedAs('partitionKey'),\n    pokemonId: string().key().savedAs('sortKey'),\n\n    // other attributes\n    name: string().optional(),\n    level: number().default(1)\n  }).and(prevSchema => ({\n    levelPlusOne: number().link<typeof prevSchema>(\n      ({ level }) => level + 1\n    )\n  }))\n  // timestamps\n  timestamps: true\n  ...\n})\n"})})]}),(0,s.jsxs)(t,{className:"details-in-admonition",children:[(0,s.jsxs)("summary",{children:["\ud83d\udd0e ",(0,s.jsxs)("b",{children:[(0,s.jsx)("code",{children:"'put'"})," mode"]})]}),(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{value:"input",label:"InputItem",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff-ts",children:'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n  "name": "Pikachu"\n}\n'})})}),(0,s.jsx)(o.A,{value:"valid",label:"ValidItem",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff-ts",children:'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n+ "created": "2022-01-01T00:00:00.000Z",\n+ "modified": "2022-01-01T00:00:00.000Z",\n  "name": "Pikachu",\n+ "level": 1,\n+ "levelPlusOne": 2,\n}\n'})})}),(0,s.jsx)(o.A,{value:"transformed",label:"TransformedItem",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff-ts",children:'{\n- "pokemonClass": "pikachu",\n+ "partitionKey": "POKEMON#pikachu",\n- "pokemonId": "123",\n+ "sortKey": "123",\n  "created": "2022-01-01T00:00:00.000Z",\n  "modified": "2022-01-01T00:00:00.000Z",\n  "name": "Pikachu",\n  "level": 1,\n  "levelPlusOne": 2,\n}\n'})})})]})]}),(0,s.jsxs)(t,{className:"details-in-admonition",children:[(0,s.jsxs)("summary",{children:["\ud83d\udd0e ",(0,s.jsxs)("b",{children:[(0,s.jsx)("code",{children:"'key'"})," mode"]})]}),(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{value:"input",label:"InputItem",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff-ts",children:'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n}\n+ // (Only key attributes are required)\n'})})}),(0,s.jsx)(o.A,{value:"valid",label:"ValidItem",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff-ts",children:'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n}\n'})})}),(0,s.jsx)(o.A,{value:"transformed",label:"TransformedItem",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff-ts",children:'{\n- "pokemonClass": "pikachu",\n+ "partitionKey": "POKEMON#pikachu",\n- "pokemonId": "123",\n+ "sortKey": "123",\n}\n'})})})]})]}),(0,s.jsxs)(t,{className:"details-in-admonition",children:[(0,s.jsxs)("summary",{children:["\ud83d\udd0e ",(0,s.jsxs)("b",{children:[(0,s.jsx)("code",{children:"'update'"})," mode"]})]}),(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{value:"input",label:"InputItem",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff-ts",children:'{\n  "pokemonClass": "bulbasaur",\n  "pokemonId": "123",\n  "name": "PlantyDino",\n}\n'})})}),(0,s.jsx)(o.A,{value:"valid",label:"ValidItem",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff-ts",children:'{\n  "pokemonClass": "bulbasaur",\n  "pokemonId": "123",\n+ "modified": "2022-01-01T00:00:00.000Z",\n  "name": "PlantyDino",\n}\n'})})}),(0,s.jsx)(o.A,{value:"transformed",label:"TransformedItem",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff-ts",children:'{\n- "pokemonClass": "bulbasaur",\n+ "partitionKey": "POKEMON#bulbasaur",\n- "pokemonId": "123",\n+ "sortKey": "123",\n  "modified": "2022-01-01T00:00:00.000Z",\n  "name": "PlantyDino",\n}\n'})})})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"For convenience, DynamoDB-Toolbox also exposes the following generic types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"KeyInputItem"}),": Similar to ",(0,s.jsx)(n.code,{children:"InputItem"})," in the ",(0,s.jsx)(n.code,{children:"key"})," mode."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"SavedItem"}),": Similar to ",(0,s.jsx)(n.code,{children:"TransformedItem"})," but adds the ",(0,s.jsx)(n.a,{href:"/docs/v1/tables/actions/parse-primary-key/#output",children:(0,s.jsx)(n.code,{children:"PrimaryKey"})})," of the Entity's Table"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {\n  KeyInputItem,\n  SavedItem\n} from 'dynamodb-toolbox/entity'\n\ntype KeyInput = KeyInputItem<typeof PokemonEntity>\ntype Saved = SavedItem<typeof PokemonEntity>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"reads",children:"Reads"}),"\n",(0,s.jsx)(n.p,{children:"For read operations, DynamoDB-Toolbox exposes the following generic types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ReadItem"}),": A valid entity item (differs from ",(0,s.jsx)(n.code,{children:"ValidItem"})," as options are different, see below)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FormattedItem"}),": Similar to ",(0,s.jsx)(n.code,{children:"ReadItem"}),", but with ",(0,s.jsx)(n.code,{children:"hidden"})," attributes omitted"]}),"\n"]}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart RL\n  classDef mmddescription fill:none,stroke:none\n  classDef mmdcontainer fill:#eee4,stroke-width:1px,stroke-dasharray:3,stroke:#ccc,font-weight:bold,font-size:large\n\n  TransformedItem["<b>TransformedItem</b>"]\n\n  subgraph Transform[ ]\n    TransformDescription["<b>Transform</b><br/>(backward)"]:::mmddescription\n    fillDescr("<span>+ renaming<br/>+ transforms<br/>(backward)</span>"):::mmddescription\n  end\n  Transform:::mmdcontainer\n\n  ReadItem["<b>ReadItem</b>"]\n\n  TransformedItem .- TransformDescription\n  TransformDescription .-> ReadItem\n\n  subgraph Format[ ]\n    FormatDescription["<b>Format</b>"]:::mmddescription\n    transformDescr("<span>+ omits hidden<br/>attributes</span>"):::mmddescription\n  end\n  Format:::mmdcontainer\n\n  FormattedItem["<b>FormattedItem</b>"]\n\n  ReadItem .- FormatDescription\n  FormatDescription .-> FormattedItem\n'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import type {\n  ReadItem,\n  FormattedItem\n} from 'dynamodb-toolbox/entity'\n\ntype Read = ReadItem<typeof PokemonEntity>\ntype Formatted = FormattedItem<typeof PokemonEntity>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["By default, those generics return complete items, but you can filter attributes and/or apply ",(0,s.jsx)(n.code,{children:"Partial"})," (deeply) with the ",(0,s.jsx)(n.code,{children:"attributes"})," and ",(0,s.jsx)(n.code,{children:"partial"})," options:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type Filtered = FormattedItem<\n  typeof PokemonEntity,\n  { attributes: 'level' | 'name' | 'deep.attr[0].path' }\n>\ntype Partial = FormattedItem<\n  typeof PokemonEntity,\n  { partial: true }\n>\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var r=t(18215);const s={tabItem:"tabItem_Ymn6"};var a=t(74848);function i(e){let{children:n,hidden:t,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,i),hidden:t,children:n})}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(96540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);