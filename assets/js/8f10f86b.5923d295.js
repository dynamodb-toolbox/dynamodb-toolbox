"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5132],{11470:(e,n,t)=>{t.d(n,{A:()=>I});var s=t(96540),i=t(18215),r=t(23104),a=t(56347),d=t(205),o=t(57485),c=t(31682),l=t(70679);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:i}}=e;return{value:n,label:t,attributes:s,default:i}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:t}=e;const i=(0,a.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(r),(0,s.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function j(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=u(e),[a,o]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:r}))),[c,h]=x({queryString:t,groupId:i}),[j,p]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,l.Dv)(t);return[i,(0,s.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),f=(()=>{const e=c??j;return m({value:e,tabValues:r})?e:null})();(0,d.A)((()=>{f&&o(f)}),[f]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),p(e)}),[h,p,r]),tabValues:r}}var p=t(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function b(e){let{className:n,block:t,selectedValue:s,selectValue:a,tabValues:d}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),l=e=>{const n=e.currentTarget,t=o.indexOf(n),i=d[t].value;i!==s&&(c(n),a(i))},h=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:d.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>o.push(e),onKeyDown:h,onClick:l,...r,className:(0,i.A)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:r}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===r));return e?(0,s.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function g(e){const n=j(e);return(0,y.jsxs)("div",{className:(0,i.A)("tabs-container",f.tabList),children:[(0,y.jsx)(b,{...n,...e}),(0,y.jsx)(v,{...n,...e})]})}function I(e){const n=(0,p.A)();return(0,y.jsx)(g,{...e,children:h(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var s=t(18215);const i={tabItem:"tabItem_Ymn6"};var r=t(74848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,a),hidden:t,children:n})}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},73527:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"migration-guide/index","title":"Migration Guide","description":"If you used the v0 of DynamoDB-Toolbox, here are the changes you need to be aware of when migrating to the v1.","source":"@site/versioned_docs/version-v0.9/9-migration-guide/index.md","sourceDirName":"9-migration-guide","slug":"/migration-guide/","permalink":"/docs/v0.9/migration-guide/","draft":false,"unlisted":false,"tags":[],"version":"v0.9","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Migration Guide"},"sidebar":"tutorialSidebar","previous":{"title":"Contributing","permalink":"/docs/v0.9/contributing/"}}');var i=t(74848),r=t(28453),a=t(11470),d=t(19365);const o={sidebar_position:8,title:"Migration Guide"},c="Migration Guide",l={},h=[{value:"<code>Table</code>",id:"table",level:2},{value:"Primary Key",id:"primary-key",level:3},{value:"Indexes",id:"indexes",level:3},{value:"<code>entityField</code>",id:"entityfield",level:3},{value:"Misc.",id:"misc",level:3},{value:"<code>Entity</code>",id:"entity",level:2},{value:"Entity attribute",id:"entity-attribute",level:3},{value:"Timestamps attribute",id:"timestamps-attribute",level:3},{value:"Misc.",id:"misc-1",level:3},{value:"Attributes",id:"attributes",level:2},{value:"<code>map</code> &amp; <code>alias</code>",id:"map--alias",level:3},{value:"<code>partitionKey</code> &amp; <code>sortKey</code>",id:"partitionkey--sortkey",level:3},{value:"<code>saved</code>",id:"saved",level:3},{value:"<code>required</code>",id:"required",level:3},{value:"<code>default</code> &amp; <code>onUpdate</code>",id:"default--onupdate",level:3},{value:"<code>dependsOn</code>",id:"dependson",level:3},{value:"<code>transform</code> &amp; <code>format</code>",id:"transform--format",level:3},{value:"<code>coerce</code>",id:"coerce",level:3},{value:"Misc.",id:"misc-2",level:3},{value:"Commands",id:"commands",level:2},{value:"Table methods",id:"table-methods",level:3},{value:"Entity methods",id:"entity-methods",level:3},{value:"Condition Expressions",id:"condition-expressions",level:2},{value:"Projection Expressions",id:"projection-expressions",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"migration-guide",children:"Migration Guide"})}),"\n",(0,i.jsx)(n.p,{children:"If you used the v0 of DynamoDB-Toolbox, here are the changes you need to be aware of when migrating to the v1."}),"\n",(0,i.jsxs)(n.p,{children:["The good news is that the breaking changes ",(0,i.jsx)(n.strong,{children:"only concern the API"}),": You won't need any data migration \ud83e\udd73"]}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsx)(n.p,{children:"Well, probably... as there are two exceptions:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If you de-activated the internal ",(0,i.jsx)(n.a,{href:"/docs/entities/internal-attributes/#entity",children:(0,i.jsx)(n.code,{children:"entity"})})," attribute (by setting ",(0,i.jsx)(n.code,{children:"entityField"})," to ",(0,i.jsx)(n.code,{children:"false"}),"), it is now required, so must be re-introduced in the data"]}),"\n",(0,i.jsxs)(n.li,{children:["If you used the ",(0,i.jsx)(n.code,{children:"saved: false"})," option on an attribute, there is no equivalent yet"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"table",children:(0,i.jsx)(n.code,{children:"Table"})}),"\n",(0,i.jsx)(n.h3,{id:"primary-key",children:"Primary Key"}),"\n",(0,i.jsxs)(n.p,{children:["Primary Key attributes now have a ",(0,i.jsx)(n.code,{children:"type"})," along with their ",(0,i.jsx)(n.code,{children:"names"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"import { Table } from 'dynamodb-toolbox/table'\n\nconst MyTable = new Table({\n- partitionKey: 'pk',\n+ partitionKey: { name: 'pk', type: 'string' },\n- sortKey: 'sk',\n+ sortKey: { name: 'sk', type: 'string' },\n  ...\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"indexes",children:"Indexes"}),"\n",(0,i.jsxs)(n.p,{children:["In the same way, index attributes now have a ",(0,i.jsx)(n.code,{children:"type"})," property as well as an explicit ",(0,i.jsx)(n.code,{children:"type"})," (",(0,i.jsx)(n.code,{children:"global"})," or ",(0,i.jsx)(n.code,{children:"local"}),"):"]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(d.A,{value:"gsi",label:"Global Index",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const MyTable = new Table({\n  indexes: {\n-   byTrainerId: { partitionKey: 'trainerId', sortKey: 'level' },\n+   byTrainerId: {\n+     type: 'global',\n+     partitionKey: { name: 'trainerId', type: 'string' },\n+     sortKey: { name: 'level', type: 'number' }\n+   },\n  },\n  ...\n})\n"})})}),(0,i.jsx)(d.A,{value:"lsi",label:"Local index",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const MyTable = new Table({\n  indexes: {\n-   byLevel: { sortKey: 'level' },\n+   byLevel: {\n+     type: 'local',\n+     sortKey: { name: 'level', type: 'number' }\n+   },\n  },\n  ...\n})\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"entityfield",children:(0,i.jsx)(n.code,{children:"entityField"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"entityField"})," has been renamed to ",(0,i.jsx)(n.code,{children:"entityAttributeSavedAs"})," to be more closely aligned with the new ",(0,i.jsx)(n.code,{children:"schema"})," syntax."]}),"\n",(0,i.jsxs)(n.p,{children:["It cannot be set to ",(0,i.jsx)(n.code,{children:"false"})," anymore (as it is required to infer correct formatting during ",(0,i.jsx)(n.a,{href:"/docs/tables/actions/scan/",children:"Scans"})," and ",(0,i.jsx)(n.a,{href:"/docs/tables/actions/query/",children:"Queries"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const MyTable = new Table({\n  ...,\n- entityField: '__entity__',\n+ entityAttributeSavedAs: '__entity__',\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"misc",children:"Misc."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"autoExecute"})," and ",(0,i.jsx)(n.code,{children:"autoParse"})," options have been removed for the sake of simplicity: All commands have a ",(0,i.jsx)(n.code,{children:".params()"})," method to inspect the resulting query. This query can also be used directly to fetch the unformatted response."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"removeNullAttributes"})," option has been removed. Attribute removals benefit from a dedicated ",(0,i.jsx)(n.code,{children:"$remove"})," symbol."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"alias"})," option has also been removed. Feel free to ",(0,i.jsx)(n.a,{href:"https://github.com/jeremydaly/dynamodb-toolbox/discussions/new/choose",children:"open a discussion"})," if you need it back."]}),"\n",(0,i.jsxs)(n.p,{children:["Finally, table ",(0,i.jsx)(n.code,{children:"attributes"})," have not been re-implemented yet (but you can still share attribute schemas between entities, see the ",(0,i.jsx)(n.a,{href:"/docs/schemas/usage/",children:"Schema documentation"})," for more details)"]}),"\n",(0,i.jsx)(n.h2,{id:"entity",children:(0,i.jsx)(n.code,{children:"Entity"})}),"\n",(0,i.jsx)(n.h3,{id:"entity-attribute",children:"Entity attribute"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"typeAlias"})," and ",(0,i.jsx)(n.code,{children:"typeHidden"})," have respectively been renamed to ",(0,i.jsx)(n.code,{children:"entityAttributeName"})," and ",(0,i.jsx)(n.code,{children:"entityAttributeHidden"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const PokemonEntity = new Entity({\n  ...,\n- typeAlias: 'ent',\n- typeHidden: true,\n+ entityAttributeName: 'ent',\n+ entityAttributeHidden: true,\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"timestamps-attribute",children:"Timestamps attribute"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"timestamps"}),", ",(0,i.jsx)(n.code,{children:"created"}),", ",(0,i.jsx)(n.code,{children:"modified"}),", ",(0,i.jsx)(n.code,{children:"createdAlias"}),", ",(0,i.jsx)(n.code,{children:"modifiedAlias"})," options have been merged in a single ",(0,i.jsx)(n.code,{children:"timestamps"})," option that is either a ",(0,i.jsx)(n.code,{children:"boolean"})," or a configuration object."]}),"\n",(0,i.jsx)(n.p,{children:"Timestamp attributes can also be hidden and independently disabled:"}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(d.A,{value:"fine-tuned",label:"Configured",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const PokemonEntity = new Entity({\n  ...,\n- timestamps: true,\n- created: '__created__',\n- createdAlias: 'creationDate',\n- modified: '__modified__',\n- modifiedAlias: 'modifiedDate',\n+ timestamps: {\n+   created: {\n+     savedAs: '__created__',\n+     name: 'creationDate'\n+   },\n+   modified: {\n+     savedAs: '__modified__',\n+     name: 'modifiedDate',\n+     hidden: true\n+   }\n+ }\n})\n"})})}),(0,i.jsx)(d.A,{value:"disabled",label:"Enabled/Disabled",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const PokemonEntity = new Entity({\n  ...,\n- timestamps: false,\n+ timestamps: {\n+   created: true,\n+   modified: false\n+ }\n})\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"misc-1",children:"Misc."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"autoExecute"})," and ",(0,i.jsx)(n.code,{children:"autoParse"})," options have been removed for the sake of simplicity: All commands have a ",(0,i.jsx)(n.code,{children:".params()"})," method to inspect the resulting query. This query can also be used directly to fetch the unformatted response."]}),"\n",(0,i.jsx)(n.h2,{id:"attributes",children:"Attributes"}),"\n",(0,i.jsxs)(n.p,{children:["The schema definition API (previous ",(0,i.jsx)(n.code,{children:"attributes"}),") is the part that received the most significant overhaul:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"+ import { schema } from 'dynamodb-toolbox/schema'\n+ import { string } from 'dynamodb-toolbox/attributes/string'\n\nconst PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   trainer: { type: 'string', map: '_t' },\n-   _p: { type: 'string', alias: 'pokemon' }\n-   ...,\n- },\n+ schema: schema({\n+   trainer: string().optional().savedAs('_t'),\n+   pokemon: string().optional().savedAs('_p'),\n+   ...\n+ }),\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"/docs/schemas/usage/",children:"Schema documentation"})," for a complete documentation on the new syntax."]}),"\n",(0,i.jsxs)(n.h3,{id:"map--alias",children:[(0,i.jsx)(n.code,{children:"map"})," & ",(0,i.jsx)(n.code,{children:"alias"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"map"})," and ",(0,i.jsx)(n.code,{children:"alias"})," options have been simplified to a single ",(0,i.jsx)(n.code,{children:"savedAs"})," options:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   trainer: { type: 'string', required: true, map: '_t' },\n-   _p: { type: 'string', required: true, alias: 'pokemon' },\n-   ...,\n- },\n+ schema: schema({\n+   trainer: string().savedAs('_t'),\n+   pokemon: string().savedAs('_p'),\n+   ...,\n+ }),\n})\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"partitionkey--sortkey",children:[(0,i.jsx)(n.code,{children:"partitionKey"})," & ",(0,i.jsx)(n.code,{children:"sortKey"})]}),"\n",(0,i.jsxs)(n.p,{children:["Instead of ",(0,i.jsx)(n.code,{children:"partitionKey"})," and ",(0,i.jsx)(n.code,{children:"sortKey"})," booleans that mapped attributes to the primary key attributes, the v1 exposes a ",(0,i.jsx)(n.code,{children:"key"})," boolean option to tag attributes as being part of the primary key."]}),"\n",(0,i.jsxs)(n.p,{children:["The renaming can simply be done through the ",(0,i.jsx)(n.code,{children:"savedAs"})," option, which is more explicit:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   trainerId: { type: 'string', partitionKey: true },\n-   pokemonId: { type: 'string', sortKey: true },\n-   ...,\n- }\n+ schema: schema({\n+   trainerId: string().key().savedAs('pk'),\n+   pokemonId: string().key().savedAs('sk'),\n+   ...,\n+ })\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The schema is validated against the ",(0,i.jsx)(n.code,{children:"Table"})," primary key. A ",(0,i.jsx)(n.code,{children:"computeKey"})," function is required if it doesn't match:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const PokemonEntity = new Entity({\n  ...,\n  schema: schema({\n-   trainerId: string().key().savedAs('pk'),\n-   pokemonId: string().key().savedAs('sk'),\n+   trainerId: string().key(),\n+   pokemonId: string().key()\n    ...,\n  }),\n+ // \ud83d\ude4c Type-safe!\n+ computeKey: ({ trainerId, pokemonId }) => ({\n+   pk: trainerId,\n+   sk: pokemonId\n+ })\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"saved",children:(0,i.jsx)(n.code,{children:"saved"})}),"\n",(0,i.jsxs)(n.p,{children:["There are no equivalent to the ",(0,i.jsx)(n.code,{children:"saved: false"})," option for the moment. Feel free to ",(0,i.jsx)(n.a,{href:"https://github.com/jeremydaly/dynamodb-toolbox/discussions/new/choose",children:"open a discussion"})," if you need it back."]}),"\n",(0,i.jsx)(n.h3,{id:"required",children:(0,i.jsx)(n.code,{children:"required"})}),"\n",(0,i.jsxs)(n.p,{children:["Attributes are now ",(0,i.jsx)(n.strong,{children:"required by default"}),". You can tag them as optional via the ",(0,i.jsx)(n.code,{children:'.required("never")'})," method (or the equivalent ",(0,i.jsx)(n.code,{children:".optional()"})," shorthand):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   optional: { type: 'string' },\n-   required: { type: 'string', required: true },\n-   always: { type: 'string', required: 'always' },\n-   ...,\n- }\n+ schema: schema({\n+   optional: string().optional(),\n+   required: string(),\n+   always: string().required('always'),\n+   ...,\n+ })\n})\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"default--onupdate",children:[(0,i.jsx)(n.code,{children:"default"})," & ",(0,i.jsx)(n.code,{children:"onUpdate"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"default"})," and ",(0,i.jsx)(n.code,{children:"onUpdate"})," options have been reworked into the following options:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"putDefault"}),": Applied on put actions (e.g. ",(0,i.jsx)(n.a,{href:"/docs/entities/actions/put-item/",children:(0,i.jsx)(n.code,{children:"PutItemCommand"})}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"updateDefault"}),": Applied on update actions (e.g. ",(0,i.jsx)(n.a,{href:"/docs/entities/actions/update-item/",children:(0,i.jsx)(n.code,{children:"UpdateItemCommand"})}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyDefault"}),": Overrides other defaults on key attributes (ignored otherwise)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"default"}),": Shorthand that acts as ",(0,i.jsx)(n.code,{children:"keyDefault"})," on key attributes and ",(0,i.jsx)(n.code,{children:"putDefault"})," otherwise"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   level: { type: 'number', required: true, default: 1 },\n-   created: {\n-     type: 'string',\n-     required: true,\n-     default: () => new Date().toISOString()\n-   },\n-   ...,\n- }\n+ schema: schema({\n+   level: number().default(1),\n+   created: string().default(() => new Date().toISOString()),\n+   ...,\n+ })\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If a default value is derived from other attributes, the v1 introduces a new notion called ",(0,i.jsx)(n.code,{children:"links"}),". See the ",(0,i.jsx)(n.a,{href:"/docs/schemas/defaults-and-links/",children:"Defaults & Links section"})," for more details:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"putLink"}),": Applied on put actions (e.g. ",(0,i.jsx)(n.a,{href:"/docs/entities/actions/put-item/",children:(0,i.jsx)(n.code,{children:"PutItemCommand"})}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"updateLink"}),": Applied on update actions (e.g. ",(0,i.jsx)(n.a,{href:"/docs/entities/actions/update-item/",children:(0,i.jsx)(n.code,{children:"UpdateItemCommand"})}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyLink"}),": Overrides other links on key attributes (ignored otherwise)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"link"}),": Shorthand that acts as ",(0,i.jsx)(n.code,{children:"keyLink"})," on key attributes and ",(0,i.jsx)(n.code,{children:"putLink"})," otherwise"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   level: { type: 'number', required: true },\n-   levelPlusOne: {\n-     type: 'number',\n-     required: true,\n-     default: ({ level }) => level + 1,\n-   },\n-   ...,\n- }\n+ schema: schema({\n+   level: number(),\n+   ...,\n+ }).and(prevSchema => ({\n+   levelPlusOne: number().link<typeof prevSchema>(\n+     ({ level }) => level + 1\n+   ),\n+ })),\n})\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["In vanilla JS, ",(0,i.jsx)(n.code,{children:"links"})," can be used directly in the original schema."]})}),"\n",(0,i.jsxs)(n.p,{children:["For example, we can make use of links to compute the primary key instead of using the ",(0,i.jsx)(n.code,{children:"computeKey"})," function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const PokemonEntity = new Entity({\n  ...,\n- computeKey: ({ trainerId, pokemonId }) => ({\n-   pk: trainerId,\n-   sk: pokemonId\n- })\n  schema: schema({\n    trainerId: string().key(),\n    pokemonId: string().key()\n    ...,\n+ }).and(prevSchema => ({\n+   pk: string().key().link<typeof prevSchema>(\n+     ({ trainerId }) => trainerId\n+   ),\n+   sk: string().key().link<typeof prevSchema>(\n+     ({ pokemonId }) => pokemonId\n+   ),\n+ })),\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dependson",children:(0,i.jsx)(n.code,{children:"dependsOn"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"dependsOn"})," option has been removed."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that links are applied ",(0,i.jsx)(n.strong,{children:"after"})," defaults, but links and defaults in themselves are computed in no guaranteed order."]}),"\n",(0,i.jsx)(n.p,{children:"You can avoid link dependencies by factorizing the underlying code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   level: { type: 'number', required: true },\n-   levelPlusOne: {\n-     type: 'number',\n-     required: true,\n-     default: ({ level }) => level + 1,\n-   },\n-   levelPlusTwo: {\n-     type: 'number',\n-     required: true,\n-     default: ({ levelPlusOne }) => levelPlusOne + 1,\n-     dependsOn: ['levelPlusOne']\n-   },\n-   ...,\n- }\n+ schema: schema({\n+   level: number(),\n+   ...,\n+ }).and(prevSchema => ({\n+   levelPlusOne: number().link<typeof prevSchema>(\n+     ({ level }) => level + 1\n+   ),\n+   levelPlusTwo: number().link<typeof prevSchema>(\n+     ({ level }) => level + 2\n+   ),\n+ })),\n})\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"transform--format",children:[(0,i.jsx)(n.code,{children:"transform"})," & ",(0,i.jsx)(n.code,{children:"format"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"transform"})," and ",(0,i.jsx)(n.code,{children:"format"})," options have been merged into a single ",(0,i.jsx)(n.code,{children:"transform"})," option:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   status: {\n-     type: 'string',\n-     required: true,\n-     transform: input => `STATUS#${input}`,\n-     format: output => output.slice(7)\n-   },\n-   ...,\n- }\n+ schema: schema({\n+   status: string().transform({\n+     parse: input => `STATUS#${input}`,\n+     format: output => output.slice(7)\n+   }),\n+   ...,\n+ })\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"prefix"})," and ",(0,i.jsx)(n.code,{children:"suffix"})," options are now examples of transformers (see the ",(0,i.jsx)(n.a,{href:"/docs/schemas/transformers/usage",children:"list of available transformers"})," for more infos)."]}),"\n",(0,i.jsx)(n.h3,{id:"coerce",children:(0,i.jsx)(n.code,{children:"coerce"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"coerce"})," option has not been re-implemented yet, but is on the roadmap."]}),"\n",(0,i.jsx)(n.h3,{id:"misc-2",children:"Misc."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"type"})," and ",(0,i.jsx)(n.code,{children:"setType"})," options are not useful and have been removed."]}),"\n",(0,i.jsxs)(n.p,{children:["Using an array for composite keys is not supported anymore: Use ",(0,i.jsx)(n.a,{href:"#default--onupdate",children:"links"})," instead."]}),"\n",(0,i.jsx)(n.h2,{id:"commands",children:"Commands"}),"\n",(0,i.jsxs)(n.p,{children:["Instead of having dedicated methods, ",(0,i.jsx)(n.code,{children:"Tables"})," and ",(0,i.jsx)(n.code,{children:"Entities"})," now have a single ",(0,i.jsx)(n.code,{children:".build"})," method which acts as a gateway to perform ",(0,i.jsx)(n.strong,{children:"actions"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff-ts",children:"+ import { GetItemCommand } from 'dynamodb-toolbox/entity/actions/get'\n\n- const { Item } = await PokemonEntity.get({ pokemonId })\n+ const { Item } = await PokemonEntity.build(GetItemCommand)\n+   .key({ pokemonId })\n+   .send()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"/docs/getting-started/usage/#methods-vs-actions",children:"Getting Started section"})," for more details on why we think this is a better syntax."]}),"\n",(0,i.jsxs)(n.p,{children:["Adding ",(0,i.jsx)(n.a,{href:"/docs/v0.9/custom-parameters/",children:"custom parameters and clauses"})," is not possible anymore, but you can always use the ",(0,i.jsx)(n.code,{children:".params()"})," methods and build from there."]}),"\n",(0,i.jsx)(n.h3,{id:"table-methods",children:"Table methods"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Cat."}),(0,i.jsx)("th",{children:"Method"}),(0,i.jsx)("th",{children:"Action"}),(0,i.jsx)("th",{children:"Description"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{rowSpan:"2",align:"center",className:"vertical",children:(0,i.jsx)("b",{children:"Fetching"})}),(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".scan(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/tables/actions/scan",children:(0,i.jsx)("code",{children:"ScanCommand"})})}),(0,i.jsxs)("td",{children:["Performs a ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Scan.html",children:"Scan Operation"})," on a ",(0,i.jsx)("code",{children:"Table"})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".query(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/tables/actions/query",children:(0,i.jsx)("code",{children:"QueryCommand"})})}),(0,i.jsxs)("td",{children:["Performs a ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html",children:"Query Operation"})," on a ",(0,i.jsx)("code",{children:"Table"})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{rowSpan:"2",align:"center",className:"vertical",children:(0,i.jsx)("b",{children:"Batching"})}),(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".batchGet(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/tables/actions/batch-get",children:(0,i.jsx)("code",{children:"BatchGetCommand"})})}),(0,i.jsxs)("td",{children:["Groups one or several ",(0,i.jsx)("a",{href:"/docs/entities/actions/batch-get",children:(0,i.jsx)("code",{children:"BatchGetRequest"})})," from the ",(0,i.jsx)("code",{children:"Table"})," entities to execute a ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchGetItem.html",children:(0,i.jsx)("code",{children:"BatchGetItem"})})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".batchWrite(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/tables/actions/batch-write",children:(0,i.jsx)("code",{children:"BatchWriteCommand"})})}),(0,i.jsxs)("td",{children:["Groups one or several ",(0,i.jsx)("a",{href:"/docs/entities/actions/batch-put",children:(0,i.jsx)("code",{children:"BatchPutRequest"})})," and ",(0,i.jsx)("a",{href:"/docs/entities/actions/batch-delete",children:(0,i.jsx)("code",{children:"BatchDeleteRequest"})})," from the ",(0,i.jsx)("code",{children:"Table"})," entities to execute a ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html",children:"BatchWriteItem"})," operation"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{rowSpan:"2",align:"center",className:"vertical",children:(0,i.jsx)("b",{children:"Transactions"})}),(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".transactGet(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/entities/actions/transact-get",children:(0,i.jsx)("code",{children:"GetTransaction"})})}),(0,i.jsxs)("td",{children:["Builds a transaction to get an entity item, to be used within ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html",children:"TransactGetItems operations"})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".transactWrite(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/entities/actions/transactions#transactwrite",children:(0,i.jsx)("code",{children:"WriteTransaction"})})}),(0,i.jsxs)("td",{children:["Builds a transaction to write entity items, to be used within ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html",children:"TransactWriteItems operations"})]})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"entity-methods",children:"Entity methods"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Cat."}),(0,i.jsx)("th",{children:"Method"}),(0,i.jsx)("th",{children:"Action"}),(0,i.jsx)("th",{children:"Description"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{rowSpan:"4",align:"center",className:"vertical",children:(0,i.jsx)("b",{children:"General"})}),(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".get(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/entities/actions/get-item",children:(0,i.jsx)("code",{children:"GetItemCommand"})})}),(0,i.jsxs)("td",{children:["Performs a ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html",children:"GetItem Operation"})," on an entity item"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".put(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/entities/actions/put-item",children:(0,i.jsx)("code",{children:"PutItemCommand"})})}),(0,i.jsxs)("td",{children:["Performs a ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html",children:"PutItem Operation"})," on an entity item"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".update(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/entities/actions/update-item",children:(0,i.jsx)("code",{children:"UpdateItemCommand"})})}),(0,i.jsxs)("td",{children:["Performs a ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html",children:"UpdateItem Operation"})," on an entity item"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".delete(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/entities/actions/delete-item",children:(0,i.jsx)("code",{children:"DeleteItemCommand"})})}),(0,i.jsxs)("td",{children:["Performs a ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html",children:"DeleteItem Operation"})," on an entity item"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{rowSpan:"3",align:"center",className:"vertical",children:(0,i.jsx)("b",{children:"Batching"})}),(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".getBatch(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/entities/actions/batch-get",children:(0,i.jsx)("code",{children:"BatchGetRequest"})})}),(0,i.jsxs)("td",{children:["Builds a request to get an entity item, to be used within ",(0,i.jsx)("a",{href:"/docs/tables/actions/batch-get",children:(0,i.jsx)("code",{children:"BatchGetCommands"})})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".putBatch(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/entities/actions/batch-put",children:(0,i.jsx)("code",{children:"BatchPutRequest"})})}),(0,i.jsxs)("td",{children:["Builds a request to put an entity item, to be used within ",(0,i.jsx)("a",{href:"/docs/tables/actions/batch-write",children:(0,i.jsx)("code",{children:"BatchWriteCommands"})})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".deleteBatch(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/entities/actions/batch-delete",children:(0,i.jsx)("code",{children:"BatchDeleteRequest"})})}),(0,i.jsxs)("td",{children:["Builds a request to delete an entity item, to be used within ",(0,i.jsx)("a",{href:"/docs/tables/actions/batch-write",children:(0,i.jsx)("code",{children:"BatchWriteCommands"})})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{rowSpan:"5",align:"center",className:"vertical",children:(0,i.jsx)("b",{children:"Transactions"})}),(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".getTransaction(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/entities/actions/transact-get",children:(0,i.jsx)("code",{children:"GetTransaction"})})}),(0,i.jsxs)("td",{children:["Builds a transaction to get an entity item, to be used within ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html",children:"TransactGetItems operations"})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".putTransaction(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/entities/actions/transact-put",children:(0,i.jsx)("code",{children:"PutTransaction"})})}),(0,i.jsxs)("td",{children:["Builds a transaction to put an entity item, to be used within ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html",children:"TransactWriteItems operations"})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".updateTransaction(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/entities/actions/transact-update",children:(0,i.jsx)("code",{children:"UpdateTransaction"})})}),(0,i.jsxs)("td",{children:["Builds a transaction to update an entity item, to be used within ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html",children:"TransactWriteItems operations"})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".deleteTransaction(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/entities/actions/transact-delete",children:(0,i.jsx)("code",{children:"DeleteTransaction"})})}),(0,i.jsxs)("td",{children:["Builds a transaction to delete an entity item, to be used within ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html",children:"TransactWriteItems operations"})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".conditionCheck(...)"})}),(0,i.jsx)("td",{children:(0,i.jsx)("a",{href:"/docs/entities/actions/condition-check",children:(0,i.jsx)("code",{children:"ConditionCheck"})})}),(0,i.jsxs)("td",{children:["Builds a condition to check against an entity item for the transaction to succeed, to be used within ",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html",children:"TransactWriteItems operations"})]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{rowSpan:"2",align:"center",className:"vertical",children:(0,i.jsx)("b",{children:"Fetching"})}),(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".scan(...)"})}),(0,i.jsx)("td",{children:"-"}),(0,i.jsxs)("td",{children:["Not implemented yet, use the Table ",(0,i.jsx)("a",{href:"/docs/tables/actions/scan",children:(0,i.jsx)("code",{children:"ScanCommand"})})," instead"]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:".query(...)"})}),(0,i.jsx)("td",{children:"-"}),(0,i.jsxs)("td",{children:["Not implemented yet, use the Table ",(0,i.jsx)("a",{href:"/docs/tables/actions/query",children:(0,i.jsx)("code",{children:"QueryCommand"})})," instead"]})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"condition-expressions",children:"Condition Expressions"}),"\n",(0,i.jsxs)(n.p,{children:["Conditions benefit from ",(0,i.jsx)(n.strong,{children:"improved typing"}),", and ",(0,i.jsx)(n.strong,{children:"clearer logical combinations"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const v0Condition = [\n  { attr: 'pokemonId', exists: false },\n  // \ud83d\udc47 'and' combination by default\n  { attr: 'level', lte: 99 },\n  [\n    // \ud83d\udc47 'or' in first condition means 'or' for group\n    { or: true, negate: true, ... }\n    ...,\n  ]\n]\n\nconst v1Condition = {\n  and: [\n    { attr: 'pokemonId', exists: false },\n    // \ud83d\ude4c \"lte\" is correcly typed\n    { attr: 'level', lte: 99 }\n    // \ud83d\ude4c You can nest logical combinations\n    {\n      or: [\n        { not: { ... } },\n        ...,\n      ]\n    },\n  ]\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"projection-expressions",children:"Projection Expressions"}),"\n",(0,i.jsx)(n.p,{children:"Projections expressions can now be deep:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const projection = {\n  attributes: [\n    'pokemonId',\n    'level',\n    'some.deep.map.value',\n    'some.array[0].element'\n  ]\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);