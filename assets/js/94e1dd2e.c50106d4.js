"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4885],{11470:(e,n,t)=>{t.d(n,{A:()=>k});var s=t(96540),i=t(18215),r=t(23104),l=t(56347),o=t(205),c=t(57485),a=t(31682),d=t(70679);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function x(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:i}}=e;return{value:n,label:t,attributes:s,default:i}}))}(t);return function(e){const n=(0,a.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function j(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:t}=e;const i=(0,l.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(r),(0,s.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function p(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=x(e),[l,c]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!j({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:r}))),[a,h]=u({queryString:t,groupId:i}),[p,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,d.Dv)(t);return[i,(0,s.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),g=(()=>{const e=a??p;return j({value:e,tabValues:r})?e:null})();(0,o.A)((()=>{g&&c(g)}),[g]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!j({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),m(e)}),[h,m,r]),tabValues:r}}var m=t(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function b(e){let{className:n,block:t,selectedValue:s,selectValue:l,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:a}=(0,r.a_)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),i=o[t].value;i!==s&&(a(n),l(i))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>c.push(e),onKeyDown:h,onClick:d,...r,className:(0,i.A)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function f(e){let{lazy:n,children:t,selectedValue:r}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===r));return e?(0,s.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function v(e){const n=p(e);return(0,y.jsxs)("div",{className:(0,i.A)("tabs-container",g.tabList),children:[(0,y.jsx)(b,{...n,...e}),(0,y.jsx)(f,{...n,...e})]})}function k(e){const n=(0,m.A)();return(0,y.jsx)(v,{...e,children:h(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>l});t(96540);var s=t(18215);const i={tabItem:"tabItem_Ymn6"};var r=t(74848);function l(e){let{children:n,hidden:t,className:l}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,l),hidden:t,children:n})}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(96540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}},66103:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>j,frontMatter:()=>c,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"entities/actions/parse-condition/index","title":"ParseCondition","description":"Builds a Condition Expression that can be used to condition write operations, or filter the results of a Query or a Scan:","source":"@site/docs/3-entities/4-actions/19-parse-condition/index.md","sourceDirName":"3-entities/4-actions/19-parse-condition","slug":"/entities/actions/parse-condition/","permalink":"/docs/entities/actions/parse-condition/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ParseCondition","sidebar_custom_props":{"sidebarActionType":"util"}},"sidebar":"tutorialSidebar","previous":{"title":"Parse","permalink":"/docs/entities/actions/parse/"},"next":{"title":"ParsePaths","permalink":"/docs/entities/actions/parse-paths/"}}');var i=t(74848),r=t(28453),l=t(11470),o=t(19365);const c={title:"ParseCondition",sidebar_custom_props:{sidebarActionType:"util"}},a="ConditionParser",d={},h=[{value:"Methods",id:"methods",level:2},{value:"<code>transform(...)</code>",id:"transform",level:3},{value:"<code>express(...)</code>",id:"express",level:3},{value:"<code>parse(...)</code>",id:"parse",level:3},{value:"Building Conditions",id:"building-conditions",level:2},{value:"Paths",id:"paths",level:3},{value:"Value conditions",id:"value-conditions",level:3},{value:"Range conditions",id:"range-conditions",level:3},{value:"Combining Conditions",id:"combining-conditions",level:2},{value:"Comparing Attributes",id:"comparing-attributes",level:2},{value:"Examples",id:"examples",level:2}];function x(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"conditionparser",children:"ConditionParser"})}),"\n",(0,i.jsxs)(n.p,{children:["Builds a ",(0,i.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html",children:"Condition Expression"})," that can be used to condition write operations, or filter the results of a ",(0,i.jsx)(n.a,{href:"/docs/tables/actions/query/",children:"Query"})," or a ",(0,i.jsx)(n.a,{href:"/docs/tables/actions/scan/",children:"Scan"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { ConditionParser } from 'dynamodb-toolbox/entity/actions/parseCondition'\n\n// \ud83d\udc47 To be used in DynamoDB commands\nconst {\n  ConditionExpression,\n  ExpressionAttributeNames,\n  ExpressionAttributeValues\n} = PokemonEntity.build(ConditionParser).parse({\n  // Pokemons with levels \u2265 50\n  attr: 'level',\n  gte: 50\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"#building-conditions",children:"Building Conditions"})," for more details on how to write conditions."]}),"\n",(0,i.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h3,{id:"transform",children:(0,i.jsx)(n.code,{children:"transform(...)"})}),"\n",(0,i.jsx)("p",{style:{marginTop:"-15px"},children:(0,i.jsx)("i",{children:(0,i.jsx)("code",{children:"(condition: Condition<ENTITY>) => Condition"})})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Validates a condition"})," for the provided ",(0,i.jsx)(n.code,{children:"Entity"})," and ",(0,i.jsx)(n.strong,{children:"transforms it"})," to match the underlying data if needed:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const pokemonSchema = item({\n  level: number().transform(addOne).savedAs('_l'),\n  ...\n})\n\nPokemonEntity.build(ConditionParser).transform({\n  attr: 'level',\n  gte: 50\n})\n// => {\n//   attr: '_l',\n//   gte: 51\n// }\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["You can opt out of the value transformation by unsetting the ",(0,i.jsx)(n.code,{children:"transform"})," option:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"PokemonEntity.build(ConditionParser).transform({\n  attr: 'level',\n  gte: 50,\n  transform: false\n})\n// => {\n//   attr: '_l',\n//   gte: 50\n// }\n"})})]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["Note that the ",(0,i.jsx)(n.code,{children:"transform(...)"})," method ",(0,i.jsx)(n.strong,{children:"may alter the condition"})," if several options of an ",(0,i.jsx)(n.a,{href:"/docs/schemas/anyOf/",children:(0,i.jsx)(n.code,{children:"anyOf"})})," attribute match a provided path or reference:"]}),(0,i.jsxs)(t,{className:"details-in-admonition",children:[(0,i.jsxs)("summary",{children:["\ud83d\udd0e ",(0,i.jsx)("b",{children:"Show example"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const pokemonSchema = item({\n  meta: anyOf(\n    map({ description: string() }),\n    map({ description: string().savedAs('d') })\n    ...\n  )\n  ...\n})\n\nPokemonEntity.build(ConditionParser).transform({\n  attr: 'meta.description',\n  exists: true\n})\n// => {\n//   or: [\n//     { attr: 'meta.description', exists: true },\n//     { attr: 'meta.d', exists: true }\n//   ]\n// }\n"})})]})]}),"\n",(0,i.jsx)(n.h3,{id:"express",children:(0,i.jsx)(n.code,{children:"express(...)"})}),"\n",(0,i.jsx)("p",{style:{marginTop:"-15px"},children:(0,i.jsx)("i",{children:(0,i.jsxs)("code",{children:[(0,i.jsx)("b",{children:"static"})," (condition: Condition) => ConditionExpression"]})})}),"\n",(0,i.jsxs)(n.p,{children:["Translates ",(0,i.jsx)(n.strong,{children:"any condition"})," to a DynamoDB ",(0,i.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html",children:"Condition Expression"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"ConditionParser.express({ attr: 'level', gte: 50 })\n// => {\n//   ConditionExpression: '#c_1 >= :c_1',\n//   ExpressionAttributeNames: { '#c_1': 'level' },\n//   ExpressionAttributeValues: { ':c_1': 50 }\n// }\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["The method's static nature emphasizes that it ",(0,i.jsx)(n.strong,{children:"does not validate the condition"}),". It should only be used on ",(0,i.jsx)(n.a,{href:"#transform",children:(0,i.jsx)(n.code,{children:"transformed"})})," conditions."]})}),"\n",(0,i.jsx)(n.h3,{id:"parse",children:(0,i.jsx)(n.code,{children:"parse(...)"})}),"\n",(0,i.jsx)("p",{style:{marginTop:"-15px"},children:(0,i.jsx)("i",{children:(0,i.jsx)("code",{children:"(condition: Condition<ENTITY>, opt?: Options) => ConditionExpression"})})}),"\n",(0,i.jsxs)(n.p,{children:["Subsequently ",(0,i.jsx)(n.a,{href:"#transform",children:(0,i.jsx)(n.code,{children:"transform"})})," and ",(0,i.jsx)(n.a,{href:"#express",children:(0,i.jsx)(n.code,{children:"express"})})," a condition for the provided ",(0,i.jsx)(n.code,{children:"Entity"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"PokemonEntity.build(ConditionParser).parse({\n  attr: 'level',\n  gte: 50\n})\n// => {\n//   ConditionExpression: '#c_1 >= :c_1',\n//   ExpressionAttributeNames: { '#c_1': 'level' },\n//   ExpressionAttributeValues: { ':c_1': 50 }\n// }\n"})}),"\n",(0,i.jsx)(n.h2,{id:"building-conditions",children:"Building Conditions"}),"\n",(0,i.jsxs)(n.p,{children:["The condition syntax from DynamoDB-Toolbox follows the ",(0,i.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.OperatorsAndFunctions.html",children:"DynamoDB specifications"}),", while making it ",(0,i.jsx)(n.strong,{children:"type-safe"})," and much ",(0,i.jsx)(n.strong,{children:"simpler"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import type { Condition } from 'dynamodb-toolbox/entity/actions/parseCondition'\n\nconst condition: Condition<typeof PokemonEntity> = {\n  attr: 'level',\n  gte: 50\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Each condition contains ",(0,i.jsx)(n.strong,{children:"an attribute path"})," and an ",(0,i.jsx)(n.strong,{children:"operator"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["You can only specify one operator per condition. To combine multiple conditions, use ",(0,i.jsx)(n.a,{href:"#combining-conditions",children:"Logical Combinations"}),"."]})}),"\n",(0,i.jsx)(n.h3,{id:"paths",children:"Paths"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"attr"})," contains the path of the attribute value to check (potentially deep). You can also specify ",(0,i.jsx)(n.code,{children:"size"})," instead of ",(0,i.jsx)(n.code,{children:"attr"})," if you want to check the ",(0,i.jsx)(n.strong,{children:"size"})," of an attribute (in which case the attribute type becomes ",(0,i.jsx)(n.code,{children:"number"}),"):"]}),"\n",(0,i.jsx)(n.admonition,{title:"Examples",type:"note",children:(0,i.jsxs)(l.A,{children:[(0,i.jsx)(o.A,{value:"root",label:"Root",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  attr: 'name',\n  eq: 'Pikachu'\n}\n"})})}),(0,i.jsx)(o.A,{value:"deep-map",label:"Deep (Map)",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  attr: 'name.firstName',\n  eq: 'Pikachu'\n}\n"})})}),(0,i.jsx)(o.A,{value:"deep-list",label:"Deep (List)",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  attr: 'names[0]',\n  eq: 'Pikachu'\n}\n"})})}),(0,i.jsx)(o.A,{value:"special-char",label:"Special characters",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  attr: \"name['.first#Name!']\",\n  eq: 'Pikachu'\n}\n"})})}),(0,i.jsx)(o.A,{value:"size",label:"Size",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const imgLte64KB: Condition<typeof PokemonEntity> = {\n  size: 'image',\n  lte: 64_000\n}\n"})})})]})}),"\n",(0,i.jsx)(n.h3,{id:"value-conditions",children:"Value conditions"}),"\n",(0,i.jsxs)(n.p,{children:["Value conditions evaluate against the ",(0,i.jsx)(n.strong,{children:"value"})," of an attribute:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Key"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Value"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Attribute Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"eq"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"scalar"})}),(0,i.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,i.jsx)(n.code,{children:"scalar"}),"*"]}),(0,i.jsxs)(n.td,{children:["Checks that the attribute is ",(0,i.jsx)(n.strong,{children:"equal"})," to the specified value"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"ne"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"scalar"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"scalar"})}),(0,i.jsxs)(n.td,{children:["Checks that the attribute is ",(0,i.jsx)(n.strong,{children:"different"})," than the specified value"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"in"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"scalar[]"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"scalar"})}),(0,i.jsxs)(n.td,{children:["Checks that the attribute is in a ",(0,i.jsx)(n.strong,{children:"finite range of values"})," (100 values max)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"contains"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"scalar"})}),(0,i.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,i.jsx)(n.code,{children:"string"}),", ",(0,i.jsx)(n.code,{children:"sets"})," or ",(0,i.jsx)(n.code,{children:"lists"})]}),(0,i.jsxs)(n.td,{children:["Checks that the attribute is one of the following:",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["A ",(0,i.jsx)("code",{children:"string"})," that contains a ",(0,i.jsx)(n.strong,{children:"particular substring"})]}),(0,i.jsxs)("li",{children:["A ",(0,i.jsx)("code",{children:"set"})," that contains a ",(0,i.jsx)(n.strong,{children:"particular element"})]}),(0,i.jsxs)("li",{children:["A ",(0,i.jsx)("code",{children:"list"})," that contains a ",(0,i.jsx)(n.strong,{children:"particular element"})]})]})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"exists"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"-"}),(0,i.jsxs)(n.td,{children:["Checks that the attribute is ",(0,i.jsx)(n.strong,{children:"present in the item"})," (or not)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"type"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"-"}),(0,i.jsxs)(n.td,{children:["Checks that the attribute is of a ",(0,i.jsx)(n.strong,{children:"particular data type"}),":",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)(n.code,{children:'"NULL"'})," = ",(0,i.jsx)(n.code,{children:"null"})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)(n.code,{children:'"BOOL"'})," = ",(0,i.jsx)(n.code,{children:"boolean"})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)(n.code,{children:'"N"'})," = ",(0,i.jsx)(n.code,{children:"number"})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)(n.code,{children:'"S"'})," = ",(0,i.jsx)(n.code,{children:"string"})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)(n.code,{children:'"B"'})," = ",(0,i.jsx)(n.code,{children:"binary"})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:'"NS|SS|BS"'})," = ",(0,i.jsx)(n.code,{children:"set"})," of ",(0,i.jsx)(n.code,{children:"number"}),", ",(0,i.jsx)(n.code,{children:"string"})," or ",(0,i.jsx)(n.code,{children:"binary"})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)(n.code,{children:'"L"'})," = ",(0,i.jsx)(n.code,{children:"list"})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)(n.code,{children:'"M"'})," = ",(0,i.jsx)(n.code,{children:"map"})]})]})]})]})]})]}),"\n",(0,i.jsx)("sup",{children:(0,i.jsxs)("i",{children:["*",(0,i.jsx)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes",children:"Scalar"})," = ",(0,i.jsx)("code",{children:"boolean"}),", ",(0,i.jsx)("code",{children:"number"}),", ",(0,i.jsx)("code",{children:"string"})," or ",(0,i.jsx)("code",{children:"binary"})]})}),"\n",(0,i.jsx)(n.admonition,{title:"Examples",type:"note",children:(0,i.jsxs)(l.A,{children:[(0,i.jsx)(o.A,{value:"eq",label:"Equal",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  attr: 'name',\n  eq: 'Pikachu'\n}\n"})})}),(0,i.jsx)(o.A,{value:"neq",label:"Not equal",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  attr: 'name',\n  ne: 'Pikachu'\n}\n"})})}),(0,i.jsx)(o.A,{value:"in",label:"In",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  attr: 'name',\n  in: ['Pikachu', 'Charizard', 'MewTwo']\n}\n"})})}),(0,i.jsx)(o.A,{value:"contains-set-list",label:"Contains",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const pokeTypeCheck: Condition<typeof PokemonEntity> = {\n  // \ud83d\udc47 `pokeTypes` = list/set of strings\n  attr: 'pokeTypes',\n  contains: 'fire'\n}\n"})})}),(0,i.jsx)(o.A,{value:"contains-string",label:"Contains (string)",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  // \ud83d\udc47 string\n  attr: 'name',\n  contains: 'Pika'\n}\n"})})}),(0,i.jsx)(o.A,{value:"exists",label:"Exists",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const customNameCheck: Condition<typeof PokemonEntity> = {\n  attr: 'customName',\n  exists: true\n}\n"})})}),(0,i.jsx)(o.A,{value:"type",label:"Type",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const pokeTypeCheck: Condition<typeof PokemonEntity> = {\n  // \ud83d\udc47 Checks that `pokeTypes` is a list\n  attr: 'pokeTypes',\n  type: 'L'\n}\n"})})})]})}),"\n",(0,i.jsx)(n.h3,{id:"range-conditions",children:"Range conditions"}),"\n",(0,i.jsxs)(n.p,{children:["Range conditions evaluate whether an attribute of sortable type (i.e. ",(0,i.jsx)(n.a,{href:"/docs/schemas/number/",children:"number"}),", ",(0,i.jsx)(n.a,{href:"/docs/schemas/string/",children:"string"})," or ",(0,i.jsx)(n.a,{href:"/docs/schemas/binary/",children:"binary"}),") is ",(0,i.jsx)(n.strong,{children:"within a certain range"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Apart from the ",(0,i.jsxs)(n.a,{href:"#value-conditions",children:[(0,i.jsx)(n.code,{children:"eq"})," value condition"]}),", only range conditions are accepted in ",(0,i.jsxs)(n.a,{href:"/docs/tables/actions/query/#query",children:[(0,i.jsx)(n.code,{children:"Query"})," ranges"]}),"."]})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Key"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Value"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Attribute Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"gte"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"sortable"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"sortable"})}),(0,i.jsxs)(n.td,{children:["Checks that the attribute is ",(0,i.jsx)(n.strong,{children:"greater than or equal to"})," the specified value"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"gt"})}),(0,i.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,i.jsx)(n.code,{children:"sortable"}),"*"]}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"sortable"})}),(0,i.jsxs)(n.td,{children:["Checks that the attribute is ",(0,i.jsx)(n.strong,{children:"strictly greater"})," than the specified value"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"lte"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"sortable"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"sortable"})}),(0,i.jsxs)(n.td,{children:["Checks that the attribute is ",(0,i.jsx)(n.strong,{children:"lower than or equal to"})," the specified value"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"lt"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"sortable"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"sortable"})}),(0,i.jsxs)(n.td,{children:["Checks that the attribute is ",(0,i.jsx)(n.strong,{children:"strictly lower than"})," the specified value"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"between"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"[sortable, sortable]"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"sortable"})}),(0,i.jsxs)(n.td,{children:["Checks that the attribute is ",(0,i.jsx)(n.strong,{children:"between"})," two values (inclusive)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"beginsWith"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsxs)(n.td,{children:["Checks that the ",(0,i.jsx)(n.code,{children:"string"})," attribute specified ",(0,i.jsx)(n.strong,{children:"begins with a particular substring"})]})]})]})]}),"\n",(0,i.jsx)("sup",{children:(0,i.jsxs)("i",{children:["* Sortable = ",(0,i.jsx)("code",{children:"number"}),", ",(0,i.jsx)("code",{children:"string"})," or ",(0,i.jsx)("code",{children:"binary"})]})}),"\n",(0,i.jsx)(n.admonition,{title:"Examples",type:"note",children:(0,i.jsxs)(l.A,{children:[(0,i.jsx)(o.A,{value:"greater-than",label:"\u2265",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const levelGte50: Condition<typeof PokemonEntity> = {\n  attr: 'level',\n  gte: 50\n}\n"})})}),(0,i.jsx)(o.A,{value:"greater-than-strict",label:">",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const levelAbove50: Condition<typeof PokemonEntity> = {\n  attr: 'level',\n  gt: 50\n}\n"})})}),(0,i.jsx)(o.A,{value:"lower-than",label:"\u2264",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const levelLte50: Condition<typeof PokemonEntity> = {\n  attr: 'level',\n  lte: 50\n}\n"})})}),(0,i.jsx)(o.A,{value:"lower-than-strict",label:"<",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const levelBelow50: Condition<typeof PokemonEntity> = {\n  attr: 'level',\n  lt: 50\n}\n"})})}),(0,i.jsx)(o.A,{value:"between",label:"Between",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const levelFrom50To70: Condition<typeof PokemonEntity> = {\n  attr: 'level',\n  between: [50, 70]\n}\n"})})}),(0,i.jsx)(o.A,{value:"begins-with",label:"Begins with",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const capturedIn2024: Condition<typeof PokemonEntity> = {\n  attr: 'captureDate',\n  beginsWith: '2024'\n}\n"})})})]})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Again, only one operator can be applied per condition: Using ",(0,i.jsx)(n.code,{children:"gte"})," and ",(0,i.jsx)(n.code,{children:"lte"})," simultaneously does ",(0,i.jsx)(n.strong,{children:"not"})," result in a ",(0,i.jsx)(n.code,{children:"between"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"combining-conditions",children:"Combining Conditions"}),"\n",(0,i.jsxs)(n.p,{children:["You can ",(0,i.jsx)(n.strong,{children:"combine conditions logically"})," with the ",(0,i.jsx)(n.code,{children:"or"}),", ",(0,i.jsx)(n.code,{children:"and"})," and ",(0,i.jsx)(n.code,{children:"not"})," operators:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Name"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Value"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Attribute Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"or"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"Condition<ENTITY>[]"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"-"}),(0,i.jsxs)(n.td,{children:["Checks that ",(0,i.jsx)(n.strong,{children:"one of"})," the child conditions evaluate to ",(0,i.jsx)(n.code,{children:"true"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"and"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"Condition<ENTITY>[]"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"-"}),(0,i.jsxs)(n.td,{children:["Checks that ",(0,i.jsx)(n.strong,{children:"all of"})," the child conditions evaluate to ",(0,i.jsx)(n.code,{children:"true"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"not"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"Condition<ENTITY>"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"-"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Negates"})," the evaluation of the condition"]})]})]})]}),"\n",(0,i.jsx)(n.admonition,{title:"Examples",type:"note",children:(0,i.jsxs)(l.A,{children:[(0,i.jsx)(o.A,{value:"or",label:"Or",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const lvlGte50OrElec: Condition<typeof PokemonEntity> = {\n  or: [\n    { attr: 'level', gte: 50 },\n    { attr: 'pokeType', eq: 'electric' }\n  ]\n}\n"})})}),(0,i.jsx)(o.A,{value:"and",label:"And",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const lvlGte50AndElec: Condition<typeof PokemonEntity> = {\n  and: [\n    { attr: 'level', gte: 50 },\n    { attr: 'pokeType', eq: 'electric' }\n  ]\n}\n"})})}),(0,i.jsx)(o.A,{value:"not",label:"Not",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const notElectric: Condition<typeof PokemonEntity> = {\n  not: {\n    attr: 'pokeType',\n    eq: 'electric'\n  }\n}\n"})})}),(0,i.jsx)(o.A,{value:"deep",label:"Deep",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const deepCondition: Condition<typeof PokemonEntity> = {\n  and: [\n    {\n      // Level \u2265 50 or \u2264 20...\n      or: [\n        { attr: 'level', gte: 50 },\n        { not: { attr: 'level', gt: 20 } }\n      ]\n    },\n    // ...and pokeType not 'electric'\n    { not: { attr: 'pokeType', eq: 'electric' } }\n  ]\n}\n"})})})]})}),"\n",(0,i.jsx)(n.h2,{id:"comparing-attributes",children:"Comparing Attributes"}),"\n",(0,i.jsxs)(n.p,{children:["Instead of directly providing values, you can ",(0,i.jsx)(n.strong,{children:"compare attributes to other attributes"})," by providing objects with an ",(0,i.jsx)(n.code,{children:"attr"})," key to the operators:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const atMaxLevel: Condition<typeof PokemonEntity> = {\n  attr: 'level',\n  eq: { attr: 'maxLevel' }\n}\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsxs)(n.p,{children:["Note that the compared attribute path is type-checked and validated, but whether its type CAN be compared is ",(0,i.jsx)(n.strong,{children:"not"})," for the moment, so be extra-careful:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const invalidCondition: Condition<typeof PokemonEntity> = {\n  attr: 'level',\n  // \u274c Reaches DynamoDB and fail\n  gte: { attr: 'name' }\n}\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.admonition,{title:"Paths",type:"note",children:(0,i.jsxs)(l.A,{children:[(0,i.jsx)(o.A,{value:"root",label:"Root",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  attr: 'name',\n  eq: 'Pikachu'\n}\n"})})}),(0,i.jsx)(o.A,{value:"deep-map",label:"Deep (Map)",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  attr: 'name.firstName',\n  eq: 'Pikachu'\n}\n"})})}),(0,i.jsx)(o.A,{value:"deep-list",label:"Deep (List)",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  attr: 'names[0]',\n  eq: 'Pikachu'\n}\n"})})}),(0,i.jsx)(o.A,{value:"special-char",label:"Special characters",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  attr: \"name['.first#Name!']\",\n  eq: 'Pikachu'\n}\n"})})}),(0,i.jsx)(o.A,{value:"size",label:"Size",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const imgLte64KB: Condition<typeof PokemonEntity> = {\n  size: 'image',\n  lte: 64_000\n}\n"})})})]})}),"\n",(0,i.jsx)(n.admonition,{title:"Value Conditions",type:"note",children:(0,i.jsxs)(l.A,{children:[(0,i.jsx)(o.A,{value:"eq",label:"Equal",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  attr: 'name',\n  eq: 'Pikachu'\n}\n"})})}),(0,i.jsx)(o.A,{value:"neq",label:"Not equal",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  attr: 'name',\n  ne: 'Pikachu'\n}\n"})})}),(0,i.jsx)(o.A,{value:"in",label:"In",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  attr: 'name',\n  in: ['Pikachu', 'Charizard', 'MewTwo']\n}\n"})})}),(0,i.jsx)(o.A,{value:"contains-set-list",label:"Contains",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const pokeTypeCheck: Condition<typeof PokemonEntity> = {\n  // \ud83d\udc47 `pokeTypes` = list/set of strings\n  attr: 'pokeTypes',\n  contains: 'fire'\n}\n"})})}),(0,i.jsx)(o.A,{value:"contains-string",label:"Contains (string)",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const nameCheck: Condition<typeof PokemonEntity> = {\n  // \ud83d\udc47 string\n  attr: 'name',\n  contains: 'Pika'\n}\n"})})}),(0,i.jsx)(o.A,{value:"exists",label:"Exists",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const customNameCheck: Condition<typeof PokemonEntity> = {\n  attr: 'customName',\n  exists: true\n}\n"})})}),(0,i.jsx)(o.A,{value:"type",label:"Type",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const pokeTypeCheck: Condition<typeof PokemonEntity> = {\n  // \ud83d\udc47 Checks that `pokeTypes` is a list\n  attr: 'pokeTypes',\n  type: 'L'\n}\n"})})})]})}),"\n",(0,i.jsx)(n.admonition,{title:"Range Conditions",type:"note",children:(0,i.jsxs)(l.A,{children:[(0,i.jsx)(o.A,{value:"greater-than",label:"\u2265",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const levelGte50: Condition<typeof PokemonEntity> = {\n  attr: 'level',\n  gte: 50\n}\n"})})}),(0,i.jsx)(o.A,{value:"greater-than-strict",label:">",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const levelAbove50: Condition<typeof PokemonEntity> = {\n  attr: 'level',\n  gt: 50\n}\n"})})}),(0,i.jsx)(o.A,{value:"lower-than",label:"\u2264",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const levelLte50: Condition<typeof PokemonEntity> = {\n  attr: 'level',\n  lte: 50\n}\n"})})}),(0,i.jsx)(o.A,{value:"lower-than-strict",label:"<",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const levelBelow50: Condition<typeof PokemonEntity> = {\n  attr: 'level',\n  lt: 50\n}\n"})})}),(0,i.jsx)(o.A,{value:"between",label:"Between",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const levelFrom50To70: Condition<typeof PokemonEntity> = {\n  attr: 'level',\n  between: [50, 70]\n}\n"})})}),(0,i.jsx)(o.A,{value:"begins-with",label:"Begins with",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const capturedIn2024: Condition<typeof PokemonEntity> = {\n  attr: 'captureDate',\n  beginsWith: '2024'\n}\n"})})})]})}),"\n",(0,i.jsx)(n.admonition,{title:"Logical Combinations",type:"note",children:(0,i.jsxs)(l.A,{children:[(0,i.jsx)(o.A,{value:"or",label:"Or",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const lvlGte50OrElec: Condition<typeof PokemonEntity> = {\n  or: [\n    { attr: 'level', gte: 50 },\n    { attr: 'pokeType', eq: 'electric' }\n  ]\n}\n"})})}),(0,i.jsx)(o.A,{value:"and",label:"And",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const lvlGte50AndElec: Condition<typeof PokemonEntity> = {\n  and: [\n    { attr: 'level', gte: 50 },\n    { attr: 'pokeType', eq: 'electric' }\n  ]\n}\n"})})}),(0,i.jsx)(o.A,{value:"not",label:"Not",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const notElectric: Condition<typeof PokemonEntity> = {\n  not: {\n    attr: 'pokeType',\n    eq: 'electric'\n  }\n}\n"})})}),(0,i.jsx)(o.A,{value:"deep",label:"Deep",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const deepCondition: Condition<typeof PokemonEntity> = {\n  and: [\n    {\n      // Level \u2265 50 or \u2264 20...\n      or: [\n        { attr: 'level', gte: 50 },\n        { not: { attr: 'level', gt: 20 } }\n      ]\n    },\n    // ...and pokeType not 'electric'\n    { not: { attr: 'pokeType', eq: 'electric' } }\n  ]\n}\n"})})})]})}),"\n",(0,i.jsx)(n.admonition,{title:"Comparing Attributes",type:"note",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const atMaxLevel: Condition<typeof PokemonEntity> = {\n  attr: 'level',\n  eq: { attr: 'maxLevel' }\n}\n"})})})]})}function j(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}}}]);