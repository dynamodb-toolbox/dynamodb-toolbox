"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1473],{11470:(e,n,t)=>{t.d(n,{A:()=>w});var r=t(96540),s=t(18215),i=t(23104),o=t(56347),a=t(205),c=t(57485),d=t(31682),l=t(70679);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:s}}=e;return{value:n,label:t,attributes:r,default:s}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const s=(0,o.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(s.location.search);n.set(i,e),s.replace({...s.location,search:n.toString()})}),[i,s])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,i=u(e),[o,c]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i}))),[d,h]=p({queryString:t,groupId:s}),[x,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,i]=(0,l.Dv)(t);return[s,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:s}),g=(()=>{const e=d??x;return m({value:e,tabValues:i})?e:null})();(0,a.A)((()=>{g&&c(g)}),[g]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),b(e)}),[h,b,i]),tabValues:i}}var b=t(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(74848);function j(e){let{className:n,block:t,selectedValue:r,selectValue:o,tabValues:a}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),l=e=>{const n=e.currentTarget,t=c.indexOf(n),s=a[t].value;s!==r&&(d(n),o(s))},h=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>c.push(e),onKeyDown:h,onClick:l,...i,className:(0,s.A)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:i}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function v(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,s.A)("tabs-container",g.tabList),children:[(0,f.jsx)(j,{...n,...e}),(0,f.jsx)(y,{...n,...e})]})}function w(e){const n=(0,b.A)();return(0,f.jsx)(v,{...e,children:h(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var r=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,o),hidden:t,children:n})}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(96540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},63962:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"migration-guide/index","title":"\u2b06 Migration Guide","description":"If you\'re currently using the v1 of DynamoDB-Toolbox, here are the changes you need to be aware of when migrating to the v2.","source":"@site/versioned_docs/version-v1/6-migration-guide/index.md","sourceDirName":"6-migration-guide","slug":"/migration-guide/","permalink":"/docs/v1/migration-guide/","draft":false,"unlisted":false,"tags":[],"version":"v1","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"\u2b06 Migration Guide"},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udca5 Error management","permalink":"/docs/v1/error-management/"}}');var s=t(74848),i=t(28453);t(11470),t(19365);const o={sidebar_position:6,title:"\u2b06 Migration Guide"},a="Migration Guide",c={},d=[{value:"Rework of the <code>entity</code> attribute",id:"rework-of-the-entity-attribute",level:2},{value:"Rework of <code>Schemas</code>",id:"rework-of-schemas",level:2},{value:"Rework of <code>record</code>",id:"rework-of-record",level:2},{value:"Renamings",id:"renamings",level:2},{value:"<code>Entity</code> and <code>Table</code> names",id:"entity-and-table-names",level:3},{value:"<code>Transformers</code>",id:"transformers",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"migration-guide",children:"Migration Guide"})}),"\n",(0,s.jsxs)(n.p,{children:["If you're currently using the ",(0,s.jsx)(n.strong,{children:"v1"})," of DynamoDB-Toolbox, here are the changes you need to be aware of when ",(0,s.jsx)(n.strong,{children:"migrating to the v2"}),"."]}),"\n",(0,s.jsxs)(n.h2,{id:"rework-of-the-entity-attribute",children:["Rework of the ",(0,s.jsx)(n.code,{children:"entity"})," attribute"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"entityAttributeName"})," and ",(0,s.jsx)(n.code,{children:"entityAttributeHidden"})," settings have been ",(0,s.jsxs)(n.strong,{children:["merged into a single ",(0,s.jsx)(n.code,{children:"entityAttribute"})]})," setting, similar to the ",(0,s.jsx)(n.a,{href:"/docs/v1/entities/internal-attributes/#timestamp-attributes",children:"timestamp attributes"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff-ts",children:"import { Entity } from 'dynamodb-toolbox/entity'\n\nconst PokemonEntity = new Entity({\n- entityAttributeName: '__entity__',\n- entityAttributeHidden: false,\n+ entityAttribute: {\n+   name: '__entity__',\n+   hidden: false\n+ },\n  ...\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The internal ",(0,s.jsx)(n.code,{children:"entity"})," attribute ",(0,s.jsx)(n.strong,{children:"can now be disabled"})," by setting ",(0,s.jsx)(n.code,{children:"entityAttribute"})," to ",(0,s.jsx)(n.code,{children:"false"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Entity } from 'dynamodb-toolbox/entity'\n\nconst PokemonEntity = new Entity({\n  entityAttribute: false,\n  ...\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This change makes ",(0,s.jsx)(n.strong,{children:"migrating to DynamoDB-Toolbox easier"}),", especially when using multiple tables (i.e., one ",(0,s.jsx)(n.code,{children:"Entity"})," per ",(0,s.jsx)(n.code,{children:"Table"}),"), where the ",(0,s.jsx)(n.code,{children:"entity"})," attribute is often unnecessary."]}),"\n",(0,s.jsxs)(n.p,{children:["If you use the Single Table Design approach, we still ",(0,s.jsxs)(n.strong,{children:["strongly recommend using the ",(0,s.jsx)(n.code,{children:"entity"})," attribute"]}),", as it improves performance and enables entity-based filtering when fetching items from multiple entities within the same ",(0,s.jsx)(n.code,{children:"Table"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Indeed, in queries and scans, the behavior regarding ",(0,s.jsx)(n.code,{children:"Entities"})," has changed as follows:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If all ",(0,s.jsx)(n.code,{children:"Entities"})," use the internal ",(0,s.jsx)(n.code,{children:"entity"})," attribute, a ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Scan.html#API_Scan_RequestSyntax",children:"Filter Expression"})," is applied"]})," based on it."]}),"\n",(0,s.jsxs)(n.li,{children:["If at least one ",(0,s.jsx)(n.code,{children:"Entity"})," does not use the internal ",(0,s.jsx)(n.code,{children:"entity"})," attribute, or if ",(0,s.jsx)(n.code,{children:"entityAttrFilter"})," is set to ",(0,s.jsx)(n.code,{children:"false"}),", ",(0,s.jsx)(n.strong,{children:"no Filter Expression is applied"}),". In this case:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Entity-based filtering is ",(0,s.jsx)(n.strong,{children:"denied"})," if more than two ",(0,s.jsx)(n.code,{children:"Entities"})," are provided."]}),"\n",(0,s.jsxs)(n.li,{children:["Returned items that lack the internal ",(0,s.jsx)(n.code,{children:"entity"})," attribute are ",(0,s.jsxs)(n.strong,{children:["formatted by all ",(0,s.jsx)(n.code,{children:"Entities"})]})," in order until formatting succeeds, which can lead to decreased performance."]}),"\n",(0,s.jsxs)(n.li,{children:["If a returned item cannot be formatted by any ",(0,s.jsx)(n.code,{children:"Entity"}),", DynamoDB-Toolbox ",(0,s.jsx)(n.strong,{children:"raises an error"}),". This behavior can be modified by setting the ",(0,s.jsx)(n.code,{children:"noEntityMatchBehavior"})," option to ",(0,s.jsx)(n.code,{children:"'DISCARD'"}),":"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const { Items } = await PokeTable.build(QueryCommand)\n  .entities(PokemonEntity, TrainerEntity)\n  .query({ partition: 'ashKetchum' })\n  .options({\n    entityAttrFilter: false,\n    noEntityMatchBehavior: 'DISCARD'\n  })\n  .send()\n"})}),"\n",(0,s.jsx)(n.p,{children:"This update provides greater flexibility while maintaining performance optimizations when needed."}),"\n",(0,s.jsxs)(n.h2,{id:"rework-of-schemas",children:["Rework of ",(0,s.jsx)(n.code,{children:"Schemas"})]}),"\n",(0,s.jsxs)(n.p,{children:["In v1, schemas existed in one of two states: ",(0,s.jsx)(n.strong,{children:"Warm"})," for building/composition time and ",(0,s.jsx)(n.strong,{children:"Frozen"})," for usage."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { string } from 'dynamodb-toolbox/attributes/string'\n\nconst warmStrSchema = string()\nconst frozenStrSchema = warmStrSchema.freeze()\n\nconst parsed = frozenStrSchema.build(Parser).parse(input)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This additional step made schema syntax cumbersome, so in v2, ",(0,s.jsx)(n.strong,{children:"the freezing step has been removed"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// v2 \ud83d\ude4c `string` is directly a \"schema\"\nimport { string } from 'dynamodb-toolbox/schema/string'\n\nconst parsed = string().build(Parser).parse(input)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"attr"})," and ",(0,s.jsx)(n.code,{children:"attr"})," shorthands have been renamed to ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"schema"})})," and ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"s"})}),", and the original ",(0,s.jsx)(n.code,{children:"schema"})," declaration has been renamed to ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"item"})}),". It is now ",(0,s.jsx)(n.strong,{children:"just another type of schema"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { item } from 'dynamodb-toolbox/schema/item'\nimport { string } from 'dynamodb-toolbox/schema/string'\n\nconst pokemonSchema = item({\n  name: string()\n})\n\n// ...or \ud83d\udc47\nimport { s } from 'dynamodb-toolbox/schema'\n\nconst pokemonSchema = s.item({\n  name: s.string()\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Actually, you don't really need to use ",(0,s.jsx)(n.code,{children:"item"})," schemas as ",(0,s.jsx)(n.code,{children:"map"})," schemas now have the ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:".pick"}),", ",(0,s.jsx)(n.code,{children:".omit"})," and ",(0,s.jsx)(n.code,{children:".and"})," methods"]})," and ",(0,s.jsxs)(n.strong,{children:["can be used within the ",(0,s.jsx)(n.code,{children:"Entity"})," constructor"]}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { map } from 'dynamodb-toolbox/schema/map'\nimport { string } from 'dynamodb-toolbox/schema/string'\nimport { number } from 'dynamodb-toolbox/schema/number'\nimport { Entity } from 'dynamodb-toolbox/entity'\n\nconst pokemonSchema = map({\n  name: string(),\n  level: number(),\n  ...\n})\n\nconst PokemonEntity = new Entity({\n  // \ud83d\udc47 Creates an `item` schema w. the same attributes + internal attributes\n  schema: pokemonSchema,\n  ...\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can still inspect a schema's properties at runtime and through its types via the ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"props"})," attribute"]}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const hiddenStr = string().hidden()\nconst isHidden = hiddenStr.props.hidden // => true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Previously, calling ",(0,s.jsx)(n.code,{children:".freeze()"})," validated the schema. In v2, validation is now done using the ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"check"})," method"]})," (which is also called in the ",(0,s.jsx)(n.code,{children:"Entity"})," constructor):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const stringWithDefault = string().default('foo')\nconst invalidSchema = list(stringWithDefault)\n\n// \u274c List elements cannot have defaults\ninvalidSchema.check()\n"})}),"\n",(0,s.jsx)(n.p,{children:"Hopefully, this makes it easier to build and re-use schemas accross your codebase."}),"\n",(0,s.jsxs)(n.h2,{id:"rework-of-record",children:["Rework of ",(0,s.jsx)(n.code,{children:"record"})]}),"\n",(0,s.jsxs)(n.p,{children:["Record schemas now ",(0,s.jsxs)(n.strong,{children:["properly translate to the ",(0,s.jsx)(n.code,{children:"Record"})," type"]})," in TS:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { record } from 'dynamodb-toolbox/schema/record'\nimport { string } from 'dynamodb-toolbox/schema/string'\nimport { number } from 'dynamodb-toolbox/schema/number'\nimport { Parser } from 'dynamodb-toolbox/schema/actions/parse'\n\nconst rec = record(string(), number())\nconst parsed = rec.build(Parser).parse(...)\n// => Record<string, number>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In particular, if the key schema is a ",(0,s.jsx)(n.code,{children:"string"})," enum, the parsing ",(0,s.jsx)(n.strong,{children:"expects an element to be present for all enum values"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const rec = record(string().enum('foo', 'bar'), number())\n\n// \u274c Raises an error as 'bar' is missing\nrec.build(Parser).parse({ foo: 42 })\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can change this behavior with the ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"partial"})," property"]}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const rec = record(...).partial()\n\n// \u2705 Succeeds\nrec.build(Parser).parse({ foo: 42 })\n"})}),"\n",(0,s.jsx)(n.h2,{id:"renamings",children:"Renamings"}),"\n",(0,s.jsxs)(n.h3,{id:"entity-and-table-names",children:[(0,s.jsx)(n.code,{children:"Entity"})," and ",(0,s.jsx)(n.code,{children:"Table"})," names"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"name"})," property of ",(0,s.jsx)(n.code,{children:"Entity"})," and ",(0,s.jsx)(n.code,{children:"Table"})," instances have been renamed to ",(0,s.jsx)(n.code,{children:"entityName"})," and ",(0,s.jsx)(n.code,{children:"tableName"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff-ts",children:"- const entityName = PokemonEntity.name\n+ const entityName = PokemonEntity.entityName\n\n- const tableName = PokeTable.name\n+ const tableName = PokeTable.tableName\n"})}),"\n",(0,s.jsx)(n.h3,{id:"transformers",children:(0,s.jsx)(n.code,{children:"Transformers"})}),"\n",(0,s.jsxs)(n.p,{children:["Transformers' ",(0,s.jsx)(n.code,{children:"parse"})," and ",(0,s.jsx)(n.code,{children:"format"})," properties have been renamed to ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"encode"})})," and ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"decode"})})," for clarity:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff-ts",children:"const prefix = {\n- parse: (input: string) => [PREFIX, input].join(''),\n+ encode: (input: string) => [PREFIX, input].join(''),\n- format: (saved: string) => saved.slice(PREFIX.length),\n+ decode: (saved: string) => saved.slice(PREFIX.length),\n}\n\nconst prefixedStrSchema = string().transform(prefix)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Similarly, the ",(0,s.jsx)(n.code,{children:"ReadValue"})," and ",(0,s.jsx)(n.code,{children:"ReadItem"})," types have been renamed to ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DecodedValue"})})," and ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DecodedItem"})}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff-ts",children:"- type ReadPokemonItem = ReadItem<typeof PokemonEntity>\n+ type DecodedPokemonItem = DecodedItem<typeof PokemonEntity>\n\n- type ReadPokemonValue = ReadValue<typeof pokemonSchema>\n+ type DecodedPokemonValue = DecodedValue<typeof pokemonSchema>\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);