"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2181],{14036:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"getting-started/examples/kv-store","title":"KV Store","description":"In this guide, we\u2019ll build a simple Key-Value Store to store Pokemons using their pokemonId as the key.","source":"@site/docs/1-getting-started/4-examples/1-kv-store.md","sourceDirName":"1-getting-started/4-examples","slug":"/getting-started/examples/kv-store","permalink":"/docs/getting-started/examples/kv-store","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"KV Store"},"sidebar":"tutorialSidebar","previous":{"title":"Usage","permalink":"/docs/getting-started/usage/"},"next":{"title":"Scans & Queries","permalink":"/docs/getting-started/examples/scans-and-queries"}}');var i=t(74848),s=t(28453);const o={title:"KV Store"},d="Simple Key-Value Store",r={},l=[{value:"Create an Entity",id:"create-an-entity",level:2},{value:"1. Define the Table",id:"1-define-the-table",level:3},{value:"2. Design a Schema",id:"2-design-a-schema",level:3},{value:"3. Create the Entity",id:"3-create-the-entity",level:3},{value:"Perform Operations",id:"perform-operations",level:2},{value:"Insert an Item",id:"insert-an-item",level:3},{value:"Get an Item",id:"get-an-item",level:3},{value:"Update an Item",id:"update-an-item",level:3},{value:"Delete an Item",id:"delete-an-item",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"simple-key-value-store",children:"Simple Key-Value Store"})}),"\n",(0,i.jsxs)(n.p,{children:["In this guide, we\u2019ll build a simple ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Key%E2%80%93value_database",children:"Key-Value Store"})," to store ",(0,i.jsx)(n.code,{children:"Pokemons"})," using their ",(0,i.jsx)(n.code,{children:"pokemonId"})," as the key."]}),"\n",(0,i.jsx)(n.h2,{id:"create-an-entity",children:"Create an Entity"}),"\n",(0,i.jsx)(n.h3,{id:"1-define-the-table",children:"1. Define the Table"}),"\n",(0,i.jsxs)(n.p,{children:["We first have to instanciate a ",(0,i.jsx)(n.a,{href:"/docs/tables/usage/",children:"Table"})," that matches our deployed configuration:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Table } from 'dynamodb-toolbox/table'\n// \ud83d\udc47 Peer dependencies\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb'\nimport { DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb'\n\nconst dynamoDBClient = new DynamoDBClient()\n\nconst PokeTable = new Table({\n  // \ud83d\udc47 DynamoDB config.\n  name: 'poke-table',\n  partitionKey: { name: 'pokemonId', type: 'string' },\n  // \ud83d\udc47 Inject the client\n  documentClient:\n    DynamoDBDocumentClient.from(dynamoDBClient)\n})\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["DynamoDB-Toolbox does NOT hold the responsibility of actually deploying your table. This should be done by other means, like the ",(0,i.jsx)(n.a,{href:"https://aws.amazon.com/cli/",children:"AWS CLI"}),", ",(0,i.jsx)(n.a,{href:"https://www.terraform.io/",children:"Terraform"})," or ",(0,i.jsx)(n.a,{href:"https://aws.amazon.com/cloudformation/",children:"Cloudformation"}),"."]})}),"\n",(0,i.jsx)(n.h3,{id:"2-design-a-schema",children:"2. Design a Schema"}),"\n",(0,i.jsxs)(n.p,{children:["Let's define a schema for our Pokemons.\nYou can read more on the ",(0,i.jsx)(n.code,{children:"schema"})," syntax in the ",(0,i.jsx)(n.a,{href:"/docs/schemas/usage/",children:"dedicated section"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Use the shorthands: s.item(), s.string()...\nimport { schema, s } from 'dynamodb-toolbox/schema'\n// ...or direct/deep imports\nimport { item } from 'dynamodb-toolbox/schema/item'\nimport { string } from 'dynamodb-toolbox/schema/string'\n...\n\nconst pokemonSchema = item({\n  // \ud83d\udc47 Key attributes\n  pokemonId: string().key(),\n\n  // \ud83d\udc47 Defaulted\n  appearedAt: string().default(now),\n\n  // \ud83d\udc47 Always required (but defaulted as well)\n  updatedAt: string()\n    .required('always')\n    .putDefault(now) // Same as `.default(now)`\n    .updateDefault(now),\n\n  // \ud83d\udc47 Optional field\n  customName: string().optional(),\n\n  // \ud83d\udc47 Finite range of options\n  species: string().enum('pikachu', 'charizard', ...),\n\n  // \ud83d\udc47 Other types\n  level: number(),\n  isLegendary: boolean().optional(),\n  pokeTypes: set(pokeTypeSchema),\n  evolutions: list(evolutionSchema).default([]),\n  resistances: record(pokeTypeSchema, number()).partial(),\n\n  // \ud83d\udc47 Union of types\n  captureState: anyOf(\n    map({\n      status: string().enum('captured'),\n      capturedAt: string()\n    }),\n    map({ status: string().enum('wild') })\n  )\n    .discriminate('status')\n    .default({ status: 'wild' }),\n\n  // \ud83d\udc47 Any type (skips validation but can be casted)\n  metadata: s.any().optional()\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-create-the-entity",children:"3. Create the Entity"}),"\n",(0,i.jsxs)(n.p,{children:["Now that we have our schema, we can define our ",(0,i.jsx)(n.a,{href:"/docs/entities/usage/",children:(0,i.jsx)(n.code,{children:"Entity"})}),"!"]}),"\n",(0,i.jsxs)(n.p,{children:["Because we have a single ",(0,i.jsx)(n.code,{children:"Entity"})," in this table, we can deactivate the internal ",(0,i.jsx)(n.a,{href:"/docs/entities/internal-attributes/#entity",children:(0,i.jsx)(n.code,{children:"entity"})})," attribute (mostly useful for Single Table Design) as well as the internal ",(0,i.jsx)(n.a,{href:"/docs/entities/internal-attributes/#timestamp-attributes",children:(0,i.jsx)(n.code,{children:"timestamp"})})," attributes (equivalent to ",(0,i.jsx)(n.code,{children:"appearedAt"})," and ",(0,i.jsx)(n.code,{children:"updatedAt"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { Entity } from 'dynamodb-toolbox/entity'\n\nconst PokemonEntity = new Entity({\n  name: 'pokemon',\n  table: PokeTable,\n  schema: pokemonSchema,\n  // Deactivate the internal attributes\n  entityAttribute: false,\n  timestamps: false\n})\n"})}),"\n",(0,i.jsx)(n.h2,{id:"perform-operations",children:"Perform Operations"}),"\n",(0,i.jsx)(n.h3,{id:"insert-an-item",children:"Insert an Item"}),"\n",(0,i.jsxs)(n.p,{children:["In order to ",(0,i.jsx)(n.a,{href:"/docs/getting-started/usage/#methods-vs-actions",children:"improve tree-shaking"}),", ",(0,i.jsx)(n.code,{children:"Entities"})," only expose a single ",(0,i.jsx)(n.code,{children:".build(...)"})," method that acts as a gateway to perform ",(0,i.jsx)(n.a,{href:"/docs/getting-started/usage/#how-do-actions-work",children:"Actions"})," (if you don't mind larger bundle sizes, you can use the ",(0,i.jsx)(n.a,{href:"/docs/entities/actions/repository/",children:(0,i.jsx)(n.code,{children:"EntityRepository"})})," action instead)."]}),"\n",(0,i.jsxs)(n.p,{children:["Let's use the ",(0,i.jsx)(n.a,{href:"/docs/entities/actions/put-item/",children:(0,i.jsx)(n.code,{children:"PutItemCommand"})})," action to write our first item:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { PutItemCommand } from 'dynamodb-toolbox/entity/actions/put'\n\nconst command = PokemonEntity.build(PutItemCommand)\n  // \ud83d\udc47 Validated AND type-safe!\n  .item({\n    pokemonId: 'pikachu-1',\n    species: 'pikachu',\n    level: 42,\n    isLegendary: false,\n    pokeTypes: new Set('electric'),\n    resistances: { rock: 3 }\n  })\n\n// \ud83d\udc47 Inspects the DynamoDB command\nconsole.log(command.params())\n\n// \ud83d\udc47 Sends the command\nawait command.send()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Assuming that the ",(0,i.jsx)(n.code,{children:"poke-table"})," exists and that you have correct permissions, this command writes the following item to DynamoDB:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "pokemonId": "pikachu-1",\n  "species": "pikachu",\n  "level": 42,\n  "isLegendary": false,\n  "pokeTypes": ["electric"], // (as a Set)\n  "resistances": { "rock": 3 },\n  // Defaulted attr. are automatically filled \ud83d\ude4c\n  "appearedAt": "2025-01-01T00:00:00.000Z",\n  "updatedAt": "2025-01-01T00:00:00.000Z",\n  "evolutions": [],\n  "captureState": { "status": "wild" }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"get-an-item",children:"Get an Item"}),"\n",(0,i.jsxs)(n.p,{children:["Let's use the ",(0,i.jsx)(n.a,{href:"/docs/entities/actions/get-item/",children:(0,i.jsx)(n.code,{children:"GetItemCommand"})})," action to retrieve our freshly written pokemon:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { GetItemCommand } from 'dynamodb-toolbox/entity/actions/get'\n\nconst command = PokemonEntity.build(GetItemCommand)\n  // \ud83d\udc47 Only (non-defaulted) key attr. are required!\n  .key({ pokemonId: 'pikachu-1' })\n\n// \ud83d\udc47 Validated AND type-safe!\nconst { Item: pikachu } = await command.send()\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"\u261d\ufe0f If the fetched data is invalid, DynamoDB-Toobox throws an error and the code is interrupted."})}),"\n",(0,i.jsxs)(n.p,{children:["You can refine most commands by using the ",(0,i.jsx)(n.code,{children:".options(...)"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const command = PokemonEntity.build(GetItemCommand)\n  .key({ pokemonId: 'pikachu-1' })\n  // \ud83d\udc47 Read consistently\n  .options({ consistent: true })\n\nconst { Item: pikachu } = await command.send()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"update-an-item",children:"Update an Item"}),"\n",(0,i.jsxs)(n.p,{children:["We can update our pokemon with the ",(0,i.jsx)(n.a,{href:"/docs/entities/actions/update-item/",children:(0,i.jsx)(n.code,{children:"UpdateItemCommand"})})," and ",(0,i.jsx)(n.a,{href:"/docs/entities/actions/update-attributes/",children:(0,i.jsx)(n.code,{children:"UpdateAttributesCommand"})}),". For instance, let's evolve our pokemon:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {\n  UpdateItemCommand,\n  $add,\n  $append\n} from 'dynamodb-toolbox/entity/actions/update'\n\nconst command = PokemonEntity.build(UpdateItemCommand)\n  // \ud83d\udc47 Validated AND type-safe!\n  .item({\n    // \ud83d\udc47 Only (non-defaulted) key & always required attr. are required!\n    pokemonId: 'pikachu-1',\n    species: 'raichu',\n    // \ud83d\udc47 Native capabilities of DynamoDB\n    level: $add(1),\n    evolutions: $append({\n      from: 'pikachu',\n      to: 'raichu',\n      at: new Date().toISOString()\n    })\n  })\n\nawait command.send()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"delete-an-item",children:"Delete an Item"}),"\n",(0,i.jsxs)(n.p,{children:["Finally, we can clear our pokemon with the ",(0,i.jsx)(n.a,{href:"/docs/entities/actions/delete-item/",children:(0,i.jsx)(n.code,{children:"DeleteItemCommand"})}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { DeleteItemCommand } from 'dynamodb-toolbox/entity/actions/delete'\n\nconst command = PokemonEntity.build(DeleteItemCommand)\n  // \ud83d\udc47 Same input as GetItemCommand\n  .key({ pokemonId: 'pikachu-1' })\n\nawait command.send()\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var a=t(96540);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);