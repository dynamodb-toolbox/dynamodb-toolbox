"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[32],{7994:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>o});var s=t(4848),i=t(8453);const d={title:"Defaults & Links"},l="Defaults & Links",a={id:"schemas/defaults-and-links/index",title:"Defaults & Links",description:"Defaults",source:"@site/versioned_docs/version-v1/4-schemas/2-defaults-and-links/index.md",sourceDirName:"4-schemas/2-defaults-and-links",slug:"/schemas/defaults-and-links/",permalink:"/docs/v1/schemas/defaults-and-links/",draft:!1,unlisted:!1,tags:[],version:"v1",frontMatter:{title:"Defaults & Links"},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/docs/v1/schemas/usage/"},next:{title:"Custom Validation",permalink:"/docs/v1/schemas/custom-validation/"}},r={},o=[{value:"Defaults",id:"defaults",level:2},{value:"Links",id:"links",level:2},{value:"Update Syntax",id:"update-syntax",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"defaults--links",children:"Defaults & Links"})}),"\n",(0,s.jsx)(n.h2,{id:"defaults",children:"Defaults"}),"\n",(0,s.jsx)(n.p,{children:"All attribute types support providing default values. There are three kinds of defaults:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"putDefault"}),": Applied on put actions (e.g. ",(0,s.jsx)(n.a,{href:"/docs/v1/entities/actions/put-item/",children:(0,s.jsx)(n.code,{children:"PutItemCommand"})}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"updateDefault"}),": Applied on update actions (e.g. ",(0,s.jsx)(n.a,{href:"/docs/v1/entities/actions/update-item/",children:(0,s.jsx)(n.code,{children:"UpdateItemCommand"})}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"keyDefault"}),": Overrides other defaults on key attributes (ignored otherwise)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"default"})," method is a shorthand that acts as ",(0,s.jsx)(n.code,{children:"keyDefault"})," on key attributes and ",(0,s.jsx)(n.code,{children:"putDefault"})," otherwise."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["\u261d\ufe0f In order for the ",(0,s.jsx)(n.code,{children:".default(...)"})," shorthand to work properly on key attributes, make sure to use it ",(0,s.jsx)(n.strong,{children:"after"})," calling ",(0,s.jsx)(n.code,{children:".key()"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"Here are some simple examples:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const nameSchema = string().default('Pikachu')\n\n// \ud83d\ude4c Getters also work!\nconst createdSchema = string().default(() =>\n  new Date().toISOString()\n)\n\nconst updatesCountSchema = number()\n  .putDefault(1)\n  .updateDefault(() => $add(1))\n"})}),"\n",(0,s.jsx)(n.h2,{id:"links",children:"Links"}),"\n",(0,s.jsxs)(n.p,{children:["In DynamoDB, it is frequent to ",(0,s.jsx)(n.strong,{children:"infer attribute values from other attributes"})," (e.g. for secondary indexes). In DynamoDB-Toolbox, this is called ",(0,s.jsx)(n.em,{children:"linking"})," attributes."]}),"\n",(0,s.jsxs)(n.p,{children:["In TypeScript, the difficulty is that it's ",(0,s.jsx)(n.strong,{children:"impossible"})," to pass the shape of the parent schema to the ",(0,s.jsx)(n.code,{children:".default"})," method, and thus efficiently type the link arguments:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const pokemonSchema = schema({\n  ...\n  level: number(),\n  levelPlusOne: number().default(\n    // \u274c Cannot infer the type\n    input => input.level + 1\n  )\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The solution is to make good use of the ",(0,s.jsx)(n.code,{children:".and(...)"})," method (see ",(0,s.jsx)(n.a,{href:"/docs/v1/schemas/usage/#updating-schemas",children:"Updating Schemas"}),") and build the schema ",(0,s.jsx)(n.strong,{children:"in two steps"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const basePokemonSchema = schema({\n  ...,\n  level: number()\n})\n\nconst completePokemonSchema = basePokemonSchema.and({\n  levelPlusOne: number().link<typeof basePokemonSchema>(\n    // \ud83d\ude4c Correctly typed!\n    ({ level }) => level + 1\n  )\n})\n\n// \ud83d\udc47 OR we can use the getter syntax:\nconst pokemonSchema = schema({\n  ...\n  level: number()\n}).and(prevSchema => ({\n  levelPlusOne: number().link<typeof prevSchema>(\n    // \ud83d\ude4c Correctly typed!\n    ({ level }) => level + 1\n  )\n}))\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This is only required if you need type inference. In vanilla JS, ",(0,s.jsx)(n.code,{children:"links"})," can be used directly in the original schema."]})}),"\n",(0,s.jsx)(n.p,{children:"Similarly to defaults, links come in three modes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"putLink"}),": Applied on put actions (e.g. ",(0,s.jsx)(n.a,{href:"/docs/v1/entities/actions/put-item/",children:(0,s.jsx)(n.code,{children:"PutItemCommand"})}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"updateLink"}),": Applied on update actions (e.g. ",(0,s.jsx)(n.a,{href:"/docs/v1/entities/actions/update-item/",children:(0,s.jsx)(n.code,{children:"UpdateItemCommand"})}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"keyLink"}),": Overrides other links on key attributes (ignored otherwise)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"link"})," method is a shorthand that acts as ",(0,s.jsx)(n.code,{children:"keyLink"})," on key attributes and ",(0,s.jsx)(n.code,{children:"putLink"})," otherwise."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["\u261d\ufe0f In order for the ",(0,s.jsx)(n.code,{children:".link(...)"})," shorthand to work properly on key attributes, make sure to use it ",(0,s.jsx)(n.strong,{children:"after"})," calling ",(0,s.jsx)(n.code,{children:".key()"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["Note that ",(0,s.jsx)(n.strong,{children:"defaults are computed before links"}),", so you can safely use defaults within links (see the ",(0,s.jsx)(n.a,{href:"/docs/v1/schemas/actions/parse",children:(0,s.jsx)(n.code,{children:"Parser"})})," action for more details)."]}),"\n",(0,s.jsx)(n.h3,{id:"update-syntax",children:"Update Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["If you use TypeScript, you may notice that the ",(0,s.jsx)(n.code,{children:"updateLink"})," input type can be quite complex. This is to reflect that ",(0,s.jsx)(n.strong,{children:"extended syntax"})," (e.g. ",(0,s.jsx)(n.code,{children:"$add"}),", ",(0,s.jsx)(n.code,{children:"$get"})," etc.) is also passed to ",(0,s.jsx)(n.code,{children:"updateLink"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const pokemonSchema = schema({\n  ...\n  level: number()\n}).and(prevSchema => ({\n  levelPlusOne: number().updateLink<typeof prevSchema>(\n    ({ level }) => {\n      if (level === undefined) {\n        return undefined\n      }\n\n      // \u274c `level` may be `$add(1)`, `$get('otherAttr')` etc.\n      return level + 1\n    }\n  )\n}))\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If you want to leverage extended syntax within the link, check the ",(0,s.jsx)(n.a,{href:"/docs/v1/entities/actions/update-item/#extended-syntax",children:(0,s.jsx)(n.code,{children:"UpdateItemCommand"})})," docs for more details. If you don't, you can escape it with the ",(0,s.jsx)(n.code,{children:"isExtension"})," type guard:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { isExtension } from 'dynamodb-toolbox/entity/actions/update/symbols'\n\nconst pokemonSchema = schema({\n  ...\n  level: number()\n}).and(prevSchema => ({\n  levelPlusOne: number().updateLink<typeof prevSchema>(\n    ({ level }) => {\n      if (level === undefined || isExtension(level)) {\n        return undefined\n      }\n\n      // \ud83d\ude4c `level` is a number\n      return level + 1\n    }\n  )\n}))\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(6540);const i={},d=s.createContext(i);function l(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);